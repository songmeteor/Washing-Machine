
WASHING_MACHINE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000be  00800100  00000e96  00000f2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  008001be  008001be  00000fe8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001018  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001058  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017fd  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb5  00000000  00000000  000029c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f11  00000000  00000000  0000367a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  0000458c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007be  00000000  00000000  000048d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dd5  00000000  00000000  00005092  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00005e67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	70 c0       	rjmp	.+224    	; 0xe6 <__bad_interrupt>
   6:	00 00       	nop
   8:	6e c0       	rjmp	.+220    	; 0xe6 <__bad_interrupt>
   a:	00 00       	nop
   c:	6c c0       	rjmp	.+216    	; 0xe6 <__bad_interrupt>
   e:	00 00       	nop
  10:	6a c0       	rjmp	.+212    	; 0xe6 <__bad_interrupt>
  12:	00 00       	nop
  14:	68 c0       	rjmp	.+208    	; 0xe6 <__bad_interrupt>
  16:	00 00       	nop
  18:	66 c0       	rjmp	.+204    	; 0xe6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	64 c0       	rjmp	.+200    	; 0xe6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	62 c0       	rjmp	.+196    	; 0xe6 <__bad_interrupt>
  22:	00 00       	nop
  24:	60 c0       	rjmp	.+192    	; 0xe6 <__bad_interrupt>
  26:	00 00       	nop
  28:	5e c0       	rjmp	.+188    	; 0xe6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5c c0       	rjmp	.+184    	; 0xe6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5a c0       	rjmp	.+180    	; 0xe6 <__bad_interrupt>
  32:	00 00       	nop
  34:	58 c0       	rjmp	.+176    	; 0xe6 <__bad_interrupt>
  36:	00 00       	nop
  38:	56 c0       	rjmp	.+172    	; 0xe6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	54 c0       	rjmp	.+168    	; 0xe6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	8b c3       	rjmp	.+1814   	; 0x758 <__vector_16>
  42:	00 00       	nop
  44:	50 c0       	rjmp	.+160    	; 0xe6 <__bad_interrupt>
  46:	00 00       	nop
  48:	4e c0       	rjmp	.+156    	; 0xe6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4c c0       	rjmp	.+152    	; 0xe6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4a c0       	rjmp	.+148    	; 0xe6 <__bad_interrupt>
  52:	00 00       	nop
  54:	48 c0       	rjmp	.+144    	; 0xe6 <__bad_interrupt>
  56:	00 00       	nop
  58:	46 c0       	rjmp	.+140    	; 0xe6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	44 c0       	rjmp	.+136    	; 0xe6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	42 c0       	rjmp	.+132    	; 0xe6 <__bad_interrupt>
  62:	00 00       	nop
  64:	40 c0       	rjmp	.+128    	; 0xe6 <__bad_interrupt>
  66:	00 00       	nop
  68:	3e c0       	rjmp	.+124    	; 0xe6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3c c0       	rjmp	.+120    	; 0xe6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3a c0       	rjmp	.+116    	; 0xe6 <__bad_interrupt>
  72:	00 00       	nop
  74:	38 c0       	rjmp	.+112    	; 0xe6 <__bad_interrupt>
  76:	00 00       	nop
  78:	36 c0       	rjmp	.+108    	; 0xe6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	34 c0       	rjmp	.+104    	; 0xe6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	32 c0       	rjmp	.+100    	; 0xe6 <__bad_interrupt>
  82:	00 00       	nop
  84:	30 c0       	rjmp	.+96     	; 0xe6 <__bad_interrupt>
  86:	00 00       	nop
  88:	2e c0       	rjmp	.+92     	; 0xe6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c6 01       	movw	r24, r12
  8e:	d1 01       	movw	r26, r2
  90:	e0 01       	movw	r28, r0
  92:	eb 01       	movw	r28, r22
  94:	f6 01       	movw	r30, r12
  96:	20 02       	muls	r18, r16
  98:	4f 02       	muls	r20, r31
  9a:	73 02       	muls	r23, r19
  9c:	cb 02       	muls	r28, r27
  9e:	d6 02       	muls	r29, r22
  a0:	e5 02       	muls	r30, r21
  a2:	f4 02       	muls	r31, r20
  a4:	03 03       	mulsu	r16, r19
  a6:	17 03       	mulsu	r17, r23
  a8:	31 03       	mulsu	r19, r17
  aa:	3e 03       	fmul	r19, r22

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d0 e1       	ldi	r29, 0x10	; 16
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e6 e9       	ldi	r30, 0x96	; 150
  c0:	fe e0       	ldi	r31, 0x0E	; 14
  c2:	00 e0       	ldi	r16, 0x00	; 0
  c4:	0b bf       	out	0x3b, r16	; 59
  c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
  c8:	07 90       	elpm	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	ae 3b       	cpi	r26, 0xBE	; 190
  ce:	b1 07       	cpc	r27, r17
  d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	ae eb       	ldi	r26, 0xBE	; 190
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
  da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
  dc:	a7 3d       	cpi	r26, 0xD7	; 215
  de:	b2 07       	cpc	r27, r18
  e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
  e2:	85 d5       	rcall	.+2826   	; 0xbee <main>
  e4:	d6 c6       	rjmp	.+3500   	; 0xe92 <_exit>

000000e6 <__bad_interrupt>:
  e6:	8c cf       	rjmp	.-232    	; 0x0 <__vectors>

000000e8 <init_button>:
                                                
extern int msec_count;
												
void init_button(void)
{
	BUTTON_DDR &= ~( 1 << BUTTON0PIN | 1 << BUTTON1PIN | 1 << BUTTON2PIN | 1 << BUTTON3PIN);
  e8:	81 b3       	in	r24, 0x11	; 17
  ea:	87 78       	andi	r24, 0x87	; 135
  ec:	81 bb       	out	0x11, r24	; 17
  ee:	08 95       	ret

000000f0 <get_button>:
// BUTTON0PIN : button_pin  
// 리턴값 : 1 :  버튼을 눌렀다 떼면 1을 return 
//          0 :  ide 

int get_button(int button_num, int button_pin)
{
  f0:	fc 01       	movw	r30, r24
	static unsigned char button_status[BUTTON_NUMER] =
	{BUTTON_RELEASE,BUTTON_RELEASE,BUTTON_RELEASE,BUTTON_RELEASE};	
	// 	지역 변수에 static을 쓰면 전역 변수처럼 함수를 빠져 나갔다 다시 들어 와도 값을 유지 한다.  
	int currtn_state;
	
	currtn_state = BUTTON_PIN & (1 << button_pin);   // 버튼을 읽는다. 
  f2:	20 b3       	in	r18, 0x10	; 16
	if (currtn_state && button_status[button_num] == BUTTON_RELEASE)  // 버튼이 처음 눌려진 noise high 
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <get_button+0xe>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <get_button+0xa>
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	82 23       	and	r24, r18
 106:	93 23       	and	r25, r19
 108:	89 2b       	or	r24, r25
 10a:	a1 f0       	breq	.+40     	; 0x134 <get_button+0x44>
 10c:	df 01       	movw	r26, r30
 10e:	a2 54       	subi	r26, 0x42	; 66
 110:	be 4f       	sbci	r27, 0xFE	; 254
 112:	8c 91       	ld	r24, X
 114:	81 11       	cpse	r24, r1
 116:	23 c0       	rjmp	.+70     	; 0x15e <get_button+0x6e>
	{
		if (msec_count % 60 == 0)
 118:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <msec_count>
 11c:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <msec_count+0x1>
 120:	6c e3       	ldi	r22, 0x3C	; 60
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	86 d6       	rcall	.+3340   	; 0xe32 <__divmodhi4>
 126:	00 97       	sbiw	r24, 0x00	; 0
 128:	e9 f4       	brne	.+58     	; 0x164 <get_button+0x74>
		{
			button_status[button_num] = BUTTON_PRESS;   // noise가 지나간 상태의 High 상태 
 12a:	e2 54       	subi	r30, 0x42	; 66
 12c:	fe 4f       	sbci	r31, 0xFE	; 254
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	20 83       	st	Z, r18
			return 0;   // 아직은 완전히 눌렸다 떼어진 상태가 아니다.
 132:	08 95       	ret
		}
	}
	else if (currtn_state==BUTTON_RELEASE && button_status[button_num] == BUTTON_PRESS)
 134:	df 01       	movw	r26, r30
 136:	a2 54       	subi	r26, 0x42	; 66
 138:	be 4f       	sbci	r27, 0xFE	; 254
 13a:	8c 91       	ld	r24, X
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	a9 f4       	brne	.+42     	; 0x16a <get_button+0x7a>
	{
		if (msec_count % 60 == 0)
 140:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <msec_count>
 144:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <msec_count+0x1>
 148:	6c e3       	ldi	r22, 0x3C	; 60
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	72 d6       	rcall	.+3300   	; 0xe32 <__divmodhi4>
 14e:	89 2b       	or	r24, r25
 150:	79 f4       	brne	.+30     	; 0x170 <get_button+0x80>
		{
			button_status[button_num] = BUTTON_RELEASE;   // 다음 버튼 체크를 위해서 초기화
 152:	e2 54       	subi	r30, 0x42	; 66
 154:	fe 4f       	sbci	r31, 0xFE	; 254
 156:	10 82       	st	Z, r1
			return 1;   // 완전히 1번 눌렸다 떼어진 상태로 인정	
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	08 95       	ret
		}		
	}
	
	return 0;   // 버튼이 open상태 
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	08 95       	ret
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	08 95       	ret
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	08 95       	ret
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	08 95       	ret

00000176 <init_buzzer>:
extern uint8_t is_buzzer_playing;
extern int buzzer_delay;

void init_buzzer(void)
{
	BUZZER_DDR |= 1 << BUZZER_PORT_NUM;   // PWM CHANNEL  OC3A(PE3) 출력 모드로 설정 한다.
 176:	bd 9a       	sbi	0x17, 5	; 23
	TCCR1A = (1<<COM1A0); // COM3A0 : 비교일치시 PE3 출력 반전 (P328 표14-6 참고)
 178:	80 e4       	ldi	r24, 0x40	; 64
 17a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12) | (1<<CS11);   // WGM32 : CTC 4(P327 표14-5) CS31: 8분주(P318)
 17c:	8a e0       	ldi	r24, 0x0A	; 10
 17e:	8e bd       	out	0x2e, r24	; 46
	// - BOTTOM :  카운터가 0x00/0x0000 일때를 가리킨다.
	// - MAX : 카운터가 0xFF/0xFFFF 일 때를 가리킨다.
	// - TOP?:  카운터가 가질 수 있는 최대값을 가리킨다. 오버플로우 인터럽트의 경우 TOP은 0xFF/0xFFFF
	//          이지만 비교일치 인터럽트의 경우 사용자가 설정한 값이 된다.
	
	TCCR1C = 0;  // P328 그림 14-11 참고
 180:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	OCR1A = 0;   // 비교 일치값을 OCR3A에 넣는다.
 184:	1b bc       	out	0x2b, r1	; 43
 186:	1a bc       	out	0x2a, r1	; 42
 188:	08 95       	ret

0000018a <button_click_sound>:
	return;
}

void button_click_sound(void)
{
	is_buzzer_playing = 1;
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <is_buzzer_playing>
	buzzer_delay = 50;
 190:	82 e3       	ldi	r24, 0x32	; 50
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <buzzer_delay+0x1>
 198:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <buzzer_delay>
	OCR1A = MI_02;
 19c:	86 ef       	ldi	r24, 0xF6	; 246
 19e:	92 e0       	ldi	r25, 0x02	; 2
 1a0:	9b bd       	out	0x2b, r25	; 43
 1a2:	8a bd       	out	0x2a, r24	; 42
 1a4:	08 95       	ret

000001a6 <power_on_sound>:
}

void power_on_sound(void)
{
	OCR1A = DO_02;  // 도
 1a6:	8c eb       	ldi	r24, 0xBC	; 188
 1a8:	93 e0       	ldi	r25, 0x03	; 3
 1aa:	9b bd       	out	0x2b, r25	; 43
 1ac:	8a bd       	out	0x2a, r24	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	81 ee       	ldi	r24, 0xE1	; 225
 1b2:	94 e0       	ldi	r25, 0x04	; 4
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <power_on_sound+0xe>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <power_on_sound+0x18>
 1be:	00 00       	nop
	_delay_ms(100);
	OCR1A = MI_02;  // 미
 1c0:	86 ef       	ldi	r24, 0xF6	; 246
 1c2:	92 e0       	ldi	r25, 0x02	; 2
 1c4:	9b bd       	out	0x2b, r25	; 43
 1c6:	8a bd       	out	0x2a, r24	; 42
 1c8:	2f ef       	ldi	r18, 0xFF	; 255
 1ca:	81 ee       	ldi	r24, 0xE1	; 225
 1cc:	94 e0       	ldi	r25, 0x04	; 4
 1ce:	21 50       	subi	r18, 0x01	; 1
 1d0:	80 40       	sbci	r24, 0x00	; 0
 1d2:	90 40       	sbci	r25, 0x00	; 0
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <power_on_sound+0x28>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <power_on_sound+0x32>
 1d8:	00 00       	nop
	_delay_ms(100);
	OCR1A = SO_02;  // 솔
 1da:	8e e7       	ldi	r24, 0x7E	; 126
 1dc:	92 e0       	ldi	r25, 0x02	; 2
 1de:	9b bd       	out	0x2b, r25	; 43
 1e0:	8a bd       	out	0x2a, r24	; 42
 1e2:	2f ef       	ldi	r18, 0xFF	; 255
 1e4:	82 e5       	ldi	r24, 0x52	; 82
 1e6:	97 e0       	ldi	r25, 0x07	; 7
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	80 40       	sbci	r24, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <power_on_sound+0x42>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <power_on_sound+0x4c>
 1f2:	00 00       	nop
	_delay_ms(150);
	OCR1A = 0;
 1f4:	1b bc       	out	0x2b, r1	; 43
 1f6:	1a bc       	out	0x2a, r1	; 42
 1f8:	08 95       	ret

000001fa <power_off_sound>:
}

void power_off_sound(void)
{
	// 도(높은)-라-파 부드러운 하강 시퀀스
	OCR1A = DO_03;  // 높은 도
 1fa:	8e ed       	ldi	r24, 0xDE	; 222
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	9b bd       	out	0x2b, r25	; 43
 200:	8a bd       	out	0x2a, r24	; 42
 202:	2f ef       	ldi	r18, 0xFF	; 255
 204:	8b ed       	ldi	r24, 0xDB	; 219
 206:	95 e0       	ldi	r25, 0x05	; 5
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	80 40       	sbci	r24, 0x00	; 0
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <power_off_sound+0xe>
 210:	00 c0       	rjmp	.+0      	; 0x212 <power_off_sound+0x18>
 212:	00 00       	nop
	_delay_ms(120);
	OCR1A = LA_02;  // 라
 214:	88 e3       	ldi	r24, 0x38	; 56
 216:	92 e0       	ldi	r25, 0x02	; 2
 218:	9b bd       	out	0x2b, r25	; 43
 21a:	8a bd       	out	0x2a, r24	; 42
 21c:	2f ef       	ldi	r18, 0xFF	; 255
 21e:	8b ed       	ldi	r24, 0xDB	; 219
 220:	95 e0       	ldi	r25, 0x05	; 5
 222:	21 50       	subi	r18, 0x01	; 1
 224:	80 40       	sbci	r24, 0x00	; 0
 226:	90 40       	sbci	r25, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <power_off_sound+0x28>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <power_off_sound+0x32>
 22c:	00 00       	nop
	_delay_ms(120);
	OCR1A = FA_02;  // 파
 22e:	8c ec       	ldi	r24, 0xCC	; 204
 230:	92 e0       	ldi	r25, 0x02	; 2
 232:	9b bd       	out	0x2b, r25	; 43
 234:	8a bd       	out	0x2a, r24	; 42
 236:	2f ef       	ldi	r18, 0xFF	; 255
 238:	89 ec       	ldi	r24, 0xC9	; 201
 23a:	98 e0       	ldi	r25, 0x08	; 8
 23c:	21 50       	subi	r18, 0x01	; 1
 23e:	80 40       	sbci	r24, 0x00	; 0
 240:	90 40       	sbci	r25, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <power_off_sound+0x42>
 244:	00 c0       	rjmp	.+0      	; 0x246 <power_off_sound+0x4c>
 246:	00 00       	nop
	_delay_ms(180);
	OCR1A = 0;
 248:	1b bc       	out	0x2b, r1	; 43
 24a:	1a bc       	out	0x2a, r1	; 42
 24c:	08 95       	ret

0000024e <wash_complete_sound>:
}

void wash_complete_sound(uint8_t* is_done)
{
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	c4 5a       	subi	r28, 0xA4	; 164
 258:	d1 09       	sbc	r29, r1
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	f8 94       	cli
 25e:	de bf       	out	0x3e, r29	; 62
 260:	0f be       	out	0x3f, r0	; 63
 262:	cd bf       	out	0x3d, r28	; 61
 264:	ac 01       	movw	r20, r24
	const int Elise_Tune[] = {MI_02, RE_02_H, MI_02, RE_02_H, MI_02, TI_01, RE_02, DO_02, LA_01, 0,
 266:	92 e5       	ldi	r25, 0x52	; 82
 268:	e0 e0       	ldi	r30, 0x00	; 0
 26a:	f1 e0       	ldi	r31, 0x01	; 1
 26c:	de 01       	movw	r26, r28
 26e:	11 96       	adiw	r26, 0x01	; 1
 270:	01 90       	ld	r0, Z+
 272:	0d 92       	st	X+, r0
 274:	9a 95       	dec	r25
 276:	e1 f7       	brne	.-8      	; 0x270 <wash_complete_sound+0x22>
		DO_01, MI_01, LA_01, TI_01, 0, MI_01, SO_01_H, TI_01, DO_02, 0,
		MI_01, MI_02, RE_02_H, MI_02, RE_02_H, MI_02, TI_01, RE_02, DO_02, LA_01, 0,
	DO_01, MI_01, LA_01, TI_01, 0, MI_01, DO_02, TI_01, LA_01, '/0'};

	const int Elise_Beats[] =
 278:	92 e5       	ldi	r25, 0x52	; 82
 27a:	e2 e5       	ldi	r30, 0x52	; 82
 27c:	f1 e0       	ldi	r31, 0x01	; 1
 27e:	de 01       	movw	r26, r28
 280:	ad 5a       	subi	r26, 0xAD	; 173
 282:	bf 4f       	sbci	r27, 0xFF	; 255
 284:	01 90       	ld	r0, Z+
 286:	0d 92       	st	X+, r0
 288:	9a 95       	dec	r25
 28a:	e1 f7       	brne	.-8      	; 0x284 <wash_complete_sound+0x36>
		BEAT_1_8, BEAT_1_8, BEAT_1_8, BEAT_1_8, BEAT_1_8, BEAT_1_8, BEAT_1_8, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_4,
	BEAT_1_8, BEAT_1_8, BEAT_1_8, BEAT_1_4, BEAT_1_4, BEAT_1_8, BEAT_1_8, BEAT_1_8, BEAT_1_2, '\0'};
	
	static uint8_t idx = 0;
	
	if (is_buzzer_playing == 0)
 28c:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <is_buzzer_playing>
 290:	91 11       	cpse	r25, r1
 292:	37 c0       	rjmp	.+110    	; 0x302 <wash_complete_sound+0xb4>
	{
		if (Elise_Beats[idx] == '\0')
 294:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <idx.1757>
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	f9 01       	movw	r30, r18
 29c:	ee 0f       	add	r30, r30
 29e:	ff 1f       	adc	r31, r31
 2a0:	83 e5       	ldi	r24, 0x53	; 83
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	8c 0f       	add	r24, r28
 2a6:	9d 1f       	adc	r25, r29
 2a8:	e8 0f       	add	r30, r24
 2aa:	f9 1f       	adc	r31, r25
 2ac:	80 81       	ld	r24, Z
 2ae:	91 81       	ldd	r25, Z+1	; 0x01
 2b0:	89 2b       	or	r24, r25
 2b2:	31 f4       	brne	.+12     	; 0x2c0 <wash_complete_sound+0x72>
		{
			idx = 0;
 2b4:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <idx.1757>
			*is_done = 1;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	fa 01       	movw	r30, r20
 2bc:	80 83       	st	Z, r24
			return;
 2be:	21 c0       	rjmp	.+66     	; 0x302 <wash_complete_sound+0xb4>
		}
		OCR1A = Elise_Tune[idx];
 2c0:	22 0f       	add	r18, r18
 2c2:	33 1f       	adc	r19, r19
 2c4:	fe 01       	movw	r30, r28
 2c6:	e2 0f       	add	r30, r18
 2c8:	f3 1f       	adc	r31, r19
 2ca:	81 81       	ldd	r24, Z+1	; 0x01
 2cc:	92 81       	ldd	r25, Z+2	; 0x02
 2ce:	9b bd       	out	0x2b, r25	; 43
 2d0:	8a bd       	out	0x2a, r24	; 42
		is_buzzer_playing = 1;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <is_buzzer_playing>
		buzzer_delay = Elise_Beats[idx];
 2d8:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <idx.1757>
 2dc:	e8 2f       	mov	r30, r24
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	ee 0f       	add	r30, r30
 2e2:	ff 1f       	adc	r31, r31
 2e4:	23 e5       	ldi	r18, 0x53	; 83
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	2c 0f       	add	r18, r28
 2ea:	3d 1f       	adc	r19, r29
 2ec:	e2 0f       	add	r30, r18
 2ee:	f3 1f       	adc	r31, r19
 2f0:	20 81       	ld	r18, Z
 2f2:	31 81       	ldd	r19, Z+1	; 0x01
 2f4:	30 93 cb 01 	sts	0x01CB, r19	; 0x8001cb <buzzer_delay+0x1>
 2f8:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <buzzer_delay>
		idx++;
 2fc:	8f 5f       	subi	r24, 0xFF	; 255
 2fe:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <idx.1757>
	}
	return;
 302:	cc 55       	subi	r28, 0x5C	; 92
 304:	df 4f       	sbci	r29, 0xFF	; 255
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	f8 94       	cli
 30a:	de bf       	out	0x3e, r29	; 62
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	cd bf       	out	0x3d, r28	; 61
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <fnd_display_left_time>:
void fnd_display_set_mode(uint8_t mode_set_num ,int total_sec_count);

extern uint8_t is_stop;

void fnd_display_left_time(uint8_t circle_mode, uint8_t left_curr_mode_time, int left_total_time, uint8_t is_done)
{
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
 31e:	69 97       	sbiw	r28, 0x19	; 25
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	f8 94       	cli
 324:	de bf       	out	0x3e, r29	; 62
 326:	0f be       	out	0x3f, r0	; 63
 328:	cd bf       	out	0x3d, r28	; 61
	uint8_t fnd_font[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x27, 0x7f, 0x67, 0x80};
 32a:	9b e0       	ldi	r25, 0x0B	; 11
 32c:	e4 ea       	ldi	r30, 0xA4	; 164
 32e:	f1 e0       	ldi	r31, 0x01	; 1
 330:	de 01       	movw	r26, r28
 332:	11 96       	adiw	r26, 0x01	; 1
 334:	01 90       	ld	r0, Z+
 336:	0d 92       	st	X+, r0
 338:	9a 95       	dec	r25
 33a:	e1 f7       	brne	.-8      	; 0x334 <fnd_display_left_time+0x1e>
	uint8_t fnd_circle[] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20};
 33c:	96 e0       	ldi	r25, 0x06	; 6
 33e:	ef ea       	ldi	r30, 0xAF	; 175
 340:	f1 e0       	ldi	r31, 0x01	; 1
 342:	de 01       	movw	r26, r28
 344:	1c 96       	adiw	r26, 0x0c	; 12
 346:	01 90       	ld	r0, Z+
 348:	0d 92       	st	X+, r0
 34a:	9a 95       	dec	r25
 34c:	e1 f7       	brne	.-8      	; 0x346 <fnd_display_left_time+0x30>
	uint8_t fnd_stop[] = {0x73, 0x3f, 0x78, 0x6d};
 34e:	93 e7       	ldi	r25, 0x73	; 115
 350:	9a 8b       	std	Y+18, r25	; 0x12
 352:	9f e3       	ldi	r25, 0x3F	; 63
 354:	9b 8b       	std	Y+19, r25	; 0x13
 356:	98 e7       	ldi	r25, 0x78	; 120
 358:	9c 8b       	std	Y+20, r25	; 0x14
 35a:	9d e6       	ldi	r25, 0x6D	; 109
 35c:	9d 8b       	std	Y+21, r25	; 0x15
	uint8_t fnd_done[] = {0x7b, 0x54, 0x5c, 0x5e};
 35e:	9b e7       	ldi	r25, 0x7B	; 123
 360:	9e 8b       	std	Y+22, r25	; 0x16
 362:	94 e5       	ldi	r25, 0x54	; 84
 364:	9f 8b       	std	Y+23, r25	; 0x17
 366:	9c e5       	ldi	r25, 0x5C	; 92
 368:	98 8f       	std	Y+24, r25	; 0x18
 36a:	9e e5       	ldi	r25, 0x5E	; 94
 36c:	99 8f       	std	Y+25, r25	; 0x19
	
	FND_DIGIT_PORT |= (1 << FND_DIGIT_D1 | 1 << FND_DIGIT_D2 | 1 << FND_DIGIT_D3 | 1 << FND_DIGIT_D4 | 1 << FND_DIGIT_D5 | 1 << FND_DIGIT_D7 | 1 << FND_DIGIT_D8);
 36e:	98 b3       	in	r25, 0x18	; 24
 370:	9f 6d       	ori	r25, 0xDF	; 223
 372:	98 bb       	out	0x18, r25	; 24
	FND_DIGIT_D6_PORT |= 1 << FND_DIGIT_D6;
 374:	91 9a       	sbi	0x12, 1	; 18
	
	static int digit_select=0;  // static를 쓰면 전역 변수 처럼 함수가 빠져 나갔다가 다시 들어 오더라도 값을 유지
	
	switch(digit_select)
 376:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <digit_select.1749>
 37a:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <digit_select.1749+0x1>
 37e:	e8 30       	cpi	r30, 0x08	; 8
 380:	f1 05       	cpc	r31, r1
 382:	08 f0       	brcs	.+2      	; 0x386 <fnd_display_left_time+0x70>
 384:	cc c0       	rjmp	.+408    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 386:	ea 5b       	subi	r30, 0xBA	; 186
 388:	ff 4f       	sbci	r31, 0xFF	; 255
 38a:	66 c5       	rjmp	.+2764   	; 0xe58 <__tablejump2__>
	{
		case 0:
			FND_DIGIT_PORT &= ~(1 << FND_DIGIT_D8);   // 011111111 FND_DIGIT_PORT = ~0x80
 38c:	c7 98       	cbi	0x18, 7	; 24
			FND_DATA_PORT = fnd_font[(left_total_time % 10)];   // 0~9초
 38e:	ca 01       	movw	r24, r20
 390:	6a e0       	ldi	r22, 0x0A	; 10
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	4e d5       	rcall	.+2716   	; 0xe32 <__divmodhi4>
 396:	fe 01       	movw	r30, r28
 398:	e8 0f       	add	r30, r24
 39a:	f9 1f       	adc	r31, r25
 39c:	81 81       	ldd	r24, Z+1	; 0x01
 39e:	85 bb       	out	0x15, r24	; 21
			break;
 3a0:	be c0       	rjmp	.+380    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
		case 1:
			FND_DIGIT_PORT &= ~(1 << FND_DIGIT_D7);
 3a2:	c6 98       	cbi	0x18, 6	; 24
			FND_DATA_PORT = fnd_font[(left_total_time / 10) % 6];   // 10단위초
 3a4:	ca 01       	movw	r24, r20
 3a6:	6a e0       	ldi	r22, 0x0A	; 10
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	43 d5       	rcall	.+2694   	; 0xe32 <__divmodhi4>
 3ac:	cb 01       	movw	r24, r22
 3ae:	66 e0       	ldi	r22, 0x06	; 6
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	3f d5       	rcall	.+2686   	; 0xe32 <__divmodhi4>
 3b4:	fe 01       	movw	r30, r28
 3b6:	e8 0f       	add	r30, r24
 3b8:	f9 1f       	adc	r31, r25
 3ba:	81 81       	ldd	r24, Z+1	; 0x01
 3bc:	85 bb       	out	0x15, r24	; 21
			break;
 3be:	af c0       	rjmp	.+350    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
		case 2:
			FND_DIGIT_D6_PORT &= ~(1 << FND_DIGIT_D6);
			FND_DATA_PORT = fnd_font[left_total_time / 60];   // 1단위 분
 3c0:	91 98       	cbi	0x12, 1	; 18
 3c2:	ca 01       	movw	r24, r20
 3c4:	6c e3       	ldi	r22, 0x3C	; 60
 3c6:	70 e0       	ldi	r23, 0x00	; 0
 3c8:	34 d5       	rcall	.+2664   	; 0xe32 <__divmodhi4>
 3ca:	fe 01       	movw	r30, r28
 3cc:	e6 0f       	add	r30, r22
 3ce:	f7 1f       	adc	r31, r23
 3d0:	81 81       	ldd	r24, Z+1	; 0x01
 3d2:	85 bb       	out	0x15, r24	; 21
			break;
 3d4:	a4 c0       	rjmp	.+328    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
		case 3:
			FND_DIGIT_PORT &= ~(1 << FND_DIGIT_D5);
 3d6:	c4 98       	cbi	0x18, 4	; 24
			FND_DATA_PORT = is_done ? fnd_font[0] : fnd_circle[circle_mode];
 3d8:	22 23       	and	r18, r18
 3da:	11 f0       	breq	.+4      	; 0x3e0 <fnd_display_left_time+0xca>
 3dc:	89 81       	ldd	r24, Y+1	; 0x01
 3de:	04 c0       	rjmp	.+8      	; 0x3e8 <fnd_display_left_time+0xd2>
 3e0:	fe 01       	movw	r30, r28
 3e2:	e8 0f       	add	r30, r24
 3e4:	f1 1d       	adc	r31, r1
 3e6:	84 85       	ldd	r24, Z+12	; 0x0c
 3e8:	85 bb       	out	0x15, r24	; 21
			break;
 3ea:	99 c0       	rjmp	.+306    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
		case 4:
			FND_DIGIT_PORT &= ~(1 << FND_DIGIT_D4);
 3ec:	c3 98       	cbi	0x18, 3	; 24
			FND_DATA_PORT =  is_stop ? fnd_stop[digit_select-4] : (is_done ? fnd_done[digit_select-4] : fnd_font[left_curr_mode_time % 10]);
 3ee:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <is_stop>
 3f2:	88 23       	and	r24, r24
 3f4:	41 f0       	breq	.+16     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f6:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <digit_select.1749>
 3fa:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <digit_select.1749+0x1>
 3fe:	ec 0f       	add	r30, r28
 400:	fd 1f       	adc	r31, r29
 402:	86 85       	ldd	r24, Z+14	; 0x0e
 404:	1b c0       	rjmp	.+54     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 406:	22 23       	and	r18, r18
 408:	41 f0       	breq	.+16     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 40a:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <digit_select.1749>
 40e:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <digit_select.1749+0x1>
 412:	ec 0f       	add	r30, r28
 414:	fd 1f       	adc	r31, r29
 416:	82 89       	ldd	r24, Z+18	; 0x12
 418:	11 c0       	rjmp	.+34     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 41a:	8d ec       	ldi	r24, 0xCD	; 205
 41c:	68 9f       	mul	r22, r24
 41e:	81 2d       	mov	r24, r1
 420:	11 24       	eor	r1, r1
 422:	86 95       	lsr	r24
 424:	86 95       	lsr	r24
 426:	86 95       	lsr	r24
 428:	88 0f       	add	r24, r24
 42a:	98 2f       	mov	r25, r24
 42c:	99 0f       	add	r25, r25
 42e:	99 0f       	add	r25, r25
 430:	89 0f       	add	r24, r25
 432:	68 1b       	sub	r22, r24
 434:	fe 01       	movw	r30, r28
 436:	e6 0f       	add	r30, r22
 438:	f1 1d       	adc	r31, r1
 43a:	81 81       	ldd	r24, Z+1	; 0x01
 43c:	85 bb       	out	0x15, r24	; 21
			break;
 43e:	6f c0       	rjmp	.+222    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
		case 5:
			FND_DIGIT_PORT &= ~(1 << FND_DIGIT_D3);
 440:	c2 98       	cbi	0x18, 2	; 24
			FND_DATA_PORT = is_stop ? fnd_stop[digit_select-4] : (is_done ? fnd_done[digit_select-4] : fnd_font[(left_curr_mode_time / 10) % 6]);
 442:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <is_stop>
 446:	88 23       	and	r24, r24
 448:	41 f0       	breq	.+16     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 44a:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <digit_select.1749>
 44e:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <digit_select.1749+0x1>
 452:	ec 0f       	add	r30, r28
 454:	fd 1f       	adc	r31, r29
 456:	86 85       	ldd	r24, Z+14	; 0x0e
 458:	20 c0       	rjmp	.+64     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 45a:	22 23       	and	r18, r18
 45c:	41 f0       	breq	.+16     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 45e:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <digit_select.1749>
 462:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <digit_select.1749+0x1>
 466:	ec 0f       	add	r30, r28
 468:	fd 1f       	adc	r31, r29
 46a:	82 89       	ldd	r24, Z+18	; 0x12
 46c:	16 c0       	rjmp	.+44     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 46e:	8d ec       	ldi	r24, 0xCD	; 205
 470:	68 9f       	mul	r22, r24
 472:	61 2d       	mov	r22, r1
 474:	11 24       	eor	r1, r1
 476:	66 95       	lsr	r22
 478:	66 95       	lsr	r22
 47a:	66 95       	lsr	r22
 47c:	8b ea       	ldi	r24, 0xAB	; 171
 47e:	68 9f       	mul	r22, r24
 480:	81 2d       	mov	r24, r1
 482:	11 24       	eor	r1, r1
 484:	86 95       	lsr	r24
 486:	86 95       	lsr	r24
 488:	98 2f       	mov	r25, r24
 48a:	99 0f       	add	r25, r25
 48c:	89 0f       	add	r24, r25
 48e:	88 0f       	add	r24, r24
 490:	68 1b       	sub	r22, r24
 492:	fe 01       	movw	r30, r28
 494:	e6 0f       	add	r30, r22
 496:	f1 1d       	adc	r31, r1
 498:	81 81       	ldd	r24, Z+1	; 0x01
 49a:	85 bb       	out	0x15, r24	; 21
			break;
 49c:	40 c0       	rjmp	.+128    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
		case 6:
			FND_DIGIT_PORT &= ~(1 << FND_DIGIT_D2);
 49e:	c1 98       	cbi	0x18, 1	; 24
			FND_DATA_PORT = is_stop ? fnd_stop[digit_select-4] : (is_done ? fnd_done[digit_select-4] : fnd_font[left_curr_mode_time / 60]);
 4a0:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <is_stop>
 4a4:	88 23       	and	r24, r24
 4a6:	41 f0       	breq	.+16     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4a8:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <digit_select.1749>
 4ac:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <digit_select.1749+0x1>
 4b0:	ec 0f       	add	r30, r28
 4b2:	fd 1f       	adc	r31, r29
 4b4:	86 85       	ldd	r24, Z+14	; 0x0e
 4b6:	15 c0       	rjmp	.+42     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4b8:	22 23       	and	r18, r18
 4ba:	41 f0       	breq	.+16     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4bc:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <digit_select.1749>
 4c0:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <digit_select.1749+0x1>
 4c4:	ec 0f       	add	r30, r28
 4c6:	fd 1f       	adc	r31, r29
 4c8:	82 89       	ldd	r24, Z+18	; 0x12
 4ca:	0b c0       	rjmp	.+22     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4cc:	89 e8       	ldi	r24, 0x89	; 137
 4ce:	68 9f       	mul	r22, r24
 4d0:	61 2d       	mov	r22, r1
 4d2:	11 24       	eor	r1, r1
 4d4:	62 95       	swap	r22
 4d6:	66 95       	lsr	r22
 4d8:	67 70       	andi	r22, 0x07	; 7
 4da:	fe 01       	movw	r30, r28
 4dc:	e6 0f       	add	r30, r22
 4de:	f1 1d       	adc	r31, r1
 4e0:	81 81       	ldd	r24, Z+1	; 0x01
 4e2:	85 bb       	out	0x15, r24	; 21
			break;
 4e4:	1c c0       	rjmp	.+56     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
		case 7:
			FND_DIGIT_PORT &= ~(1 << FND_DIGIT_D1);
 4e6:	c0 98       	cbi	0x18, 0	; 24
			FND_DATA_PORT = is_stop ? fnd_stop[digit_select-4] : (is_done ? fnd_done[digit_select-4] : fnd_circle[circle_mode]);
 4e8:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <is_stop>
 4ec:	99 23       	and	r25, r25
 4ee:	41 f0       	breq	.+16     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 4f0:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <digit_select.1749>
 4f4:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <digit_select.1749+0x1>
 4f8:	ec 0f       	add	r30, r28
 4fa:	fd 1f       	adc	r31, r29
 4fc:	86 85       	ldd	r24, Z+14	; 0x0e
 4fe:	0e c0       	rjmp	.+28     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 500:	22 23       	and	r18, r18
 502:	41 f0       	breq	.+16     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 504:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <digit_select.1749>
 508:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <digit_select.1749+0x1>
 50c:	ec 0f       	add	r30, r28
 50e:	fd 1f       	adc	r31, r29
 510:	82 89       	ldd	r24, Z+18	; 0x12
 512:	04 c0       	rjmp	.+8      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 514:	fe 01       	movw	r30, r28
 516:	e8 0f       	add	r30, r24
 518:	f1 1d       	adc	r31, r1
 51a:	84 85       	ldd	r24, Z+12	; 0x0c
 51c:	85 bb       	out	0x15, r24	; 21
			break;
	}
	digit_select++;
	digit_select %= 8;   // 다음 표시할 자리수 선택
 51e:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <digit_select.1749>
 522:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <digit_select.1749+0x1>
 526:	01 96       	adiw	r24, 0x01	; 1
 528:	87 70       	andi	r24, 0x07	; 7
 52a:	90 78       	andi	r25, 0x80	; 128
 52c:	99 23       	and	r25, r25
 52e:	24 f4       	brge	.+8      	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
 530:	01 97       	sbiw	r24, 0x01	; 1
 532:	88 6f       	ori	r24, 0xF8	; 248
 534:	9f 6f       	ori	r25, 0xFF	; 255
 536:	01 96       	adiw	r24, 0x01	; 1
 538:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <digit_select.1749+0x1>
 53c:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <digit_select.1749>
}
 540:	69 96       	adiw	r28, 0x19	; 25
 542:	0f b6       	in	r0, 0x3f	; 63
 544:	f8 94       	cli
 546:	de bf       	out	0x3e, r29	; 62
 548:	0f be       	out	0x3f, r0	; 63
 54a:	cd bf       	out	0x3d, r28	; 61
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	08 95       	ret

00000552 <fnd_display_set_mode>:

void fnd_display_set_mode(uint8_t mode_set_num ,int total_sec_count)
{
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	cd b7       	in	r28, 0x3d	; 61
 558:	de b7       	in	r29, 0x3e	; 62
 55a:	2b 97       	sbiw	r28, 0x0b	; 11
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	f8 94       	cli
 560:	de bf       	out	0x3e, r29	; 62
 562:	0f be       	out	0x3f, r0	; 63
 564:	cd bf       	out	0x3d, r28	; 61
	uint8_t fnd_font[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x27, 0x7f, 0x67, 0x80};
 566:	9b e0       	ldi	r25, 0x0B	; 11
 568:	e4 ea       	ldi	r30, 0xA4	; 164
 56a:	f1 e0       	ldi	r31, 0x01	; 1
 56c:	de 01       	movw	r26, r28
 56e:	11 96       	adiw	r26, 0x01	; 1
 570:	01 90       	ld	r0, Z+
 572:	0d 92       	st	X+, r0
 574:	9a 95       	dec	r25
 576:	e1 f7       	brne	.-8      	; 0x570 <fnd_display_set_mode+0x1e>
	
	FND_DIGIT_PORT |= (1 << FND_DIGIT_D1 | 1 << FND_DIGIT_D2 | 1 << FND_DIGIT_D3 | 1 << FND_DIGIT_D4 | 1 << FND_DIGIT_D5 | 1 << FND_DIGIT_D7 | 1 << FND_DIGIT_D8);
 578:	98 b3       	in	r25, 0x18	; 24
 57a:	9f 6d       	ori	r25, 0xDF	; 223
 57c:	98 bb       	out	0x18, r25	; 24
	FND_DIGIT_D6_PORT |= 1 << FND_DIGIT_D6;
 57e:	91 9a       	sbi	0x12, 1	; 18
	
	static int digit_select=0;  // static를 쓰면 전역 변수 처럼 함수가 빠져 나갔다가 다시 들어 오더라도 값을 유지
	
	switch(digit_select)
 580:	e0 91 c3 01 	lds	r30, 0x01C3	; 0x8001c3 <digit_select.1764>
 584:	f0 91 c4 01 	lds	r31, 0x01C4	; 0x8001c4 <digit_select.1764+0x1>
 588:	e8 30       	cpi	r30, 0x08	; 8
 58a:	f1 05       	cpc	r31, r1
 58c:	08 f0       	brcs	.+2      	; 0x590 <fnd_display_set_mode+0x3e>
 58e:	84 c0       	rjmp	.+264    	; 0x698 <fnd_display_set_mode+0x146>
 590:	e2 5b       	subi	r30, 0xB2	; 178
 592:	ff 4f       	sbci	r31, 0xFF	; 255
 594:	61 c4       	rjmp	.+2242   	; 0xe58 <__tablejump2__>
	{
		case 0:
		FND_DIGIT_PORT &= ~(1 << FND_DIGIT_D8);   // 011111111 FND_DIGIT_PORT = ~0x80
 596:	c7 98       	cbi	0x18, 7	; 24
		FND_DATA_PORT = fnd_font[total_sec_count % 10];   // 0~9초
 598:	cb 01       	movw	r24, r22
 59a:	6a e0       	ldi	r22, 0x0A	; 10
 59c:	70 e0       	ldi	r23, 0x00	; 0
 59e:	49 d4       	rcall	.+2194   	; 0xe32 <__divmodhi4>
 5a0:	fe 01       	movw	r30, r28
 5a2:	e8 0f       	add	r30, r24
 5a4:	f9 1f       	adc	r31, r25
 5a6:	81 81       	ldd	r24, Z+1	; 0x01
 5a8:	85 bb       	out	0x15, r24	; 21
		break;
 5aa:	76 c0       	rjmp	.+236    	; 0x698 <fnd_display_set_mode+0x146>
		case 1:
		FND_DIGIT_PORT &= ~(1 << FND_DIGIT_D7);
 5ac:	c6 98       	cbi	0x18, 6	; 24
		FND_DATA_PORT = fnd_font[total_sec_count / 10 % 6];   // 10단위초
 5ae:	cb 01       	movw	r24, r22
 5b0:	6a e0       	ldi	r22, 0x0A	; 10
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	3e d4       	rcall	.+2172   	; 0xe32 <__divmodhi4>
 5b6:	cb 01       	movw	r24, r22
 5b8:	66 e0       	ldi	r22, 0x06	; 6
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	3a d4       	rcall	.+2164   	; 0xe32 <__divmodhi4>
 5be:	fe 01       	movw	r30, r28
 5c0:	e8 0f       	add	r30, r24
 5c2:	f9 1f       	adc	r31, r25
 5c4:	81 81       	ldd	r24, Z+1	; 0x01
 5c6:	85 bb       	out	0x15, r24	; 21
		break;
 5c8:	67 c0       	rjmp	.+206    	; 0x698 <fnd_display_set_mode+0x146>
		case 2:
		FND_DIGIT_D6_PORT &= ~(1 << FND_DIGIT_D6);
		FND_DATA_PORT = fnd_font[total_sec_count / 60 % 10];   // 1단위 분
 5ca:	91 98       	cbi	0x12, 1	; 18
 5cc:	cb 01       	movw	r24, r22
 5ce:	6c e3       	ldi	r22, 0x3C	; 60
 5d0:	70 e0       	ldi	r23, 0x00	; 0
 5d2:	2f d4       	rcall	.+2142   	; 0xe32 <__divmodhi4>
 5d4:	cb 01       	movw	r24, r22
 5d6:	6a e0       	ldi	r22, 0x0A	; 10
 5d8:	70 e0       	ldi	r23, 0x00	; 0
 5da:	2b d4       	rcall	.+2134   	; 0xe32 <__divmodhi4>
 5dc:	fe 01       	movw	r30, r28
 5de:	e8 0f       	add	r30, r24
 5e0:	f9 1f       	adc	r31, r25
 5e2:	81 81       	ldd	r24, Z+1	; 0x01
 5e4:	85 bb       	out	0x15, r24	; 21
		break;
 5e6:	58 c0       	rjmp	.+176    	; 0x698 <fnd_display_set_mode+0x146>
		case 3:
		FND_DIGIT_PORT &= ~(1 << FND_DIGIT_D5);
 5e8:	c4 98       	cbi	0x18, 4	; 24
		FND_DATA_PORT = fnd_font[total_sec_count / 600 % 6];   // 10단위 분
 5ea:	cb 01       	movw	r24, r22
 5ec:	68 e5       	ldi	r22, 0x58	; 88
 5ee:	72 e0       	ldi	r23, 0x02	; 2
 5f0:	20 d4       	rcall	.+2112   	; 0xe32 <__divmodhi4>
 5f2:	cb 01       	movw	r24, r22
 5f4:	66 e0       	ldi	r22, 0x06	; 6
 5f6:	70 e0       	ldi	r23, 0x00	; 0
 5f8:	1c d4       	rcall	.+2104   	; 0xe32 <__divmodhi4>
 5fa:	fe 01       	movw	r30, r28
 5fc:	e8 0f       	add	r30, r24
 5fe:	f9 1f       	adc	r31, r25
 600:	81 81       	ldd	r24, Z+1	; 0x01
 602:	85 bb       	out	0x15, r24	; 21
 604:	49 c0       	rjmp	.+146    	; 0x698 <fnd_display_set_mode+0x146>
		break;
 606:	c3 98       	cbi	0x18, 3	; 24
		case 4:
		FND_DIGIT_PORT &= ~(1 << FND_DIGIT_D4);
 608:	9d ec       	ldi	r25, 0xCD	; 205
		FND_DATA_PORT = fnd_font[mode_set_num % 10];
 60a:	89 9f       	mul	r24, r25
 60c:	91 2d       	mov	r25, r1
 60e:	11 24       	eor	r1, r1
 610:	96 95       	lsr	r25
 612:	96 95       	lsr	r25
 614:	96 95       	lsr	r25
 616:	99 0f       	add	r25, r25
 618:	29 2f       	mov	r18, r25
 61a:	22 0f       	add	r18, r18
 61c:	22 0f       	add	r18, r18
 61e:	92 0f       	add	r25, r18
 620:	89 1b       	sub	r24, r25
 622:	fe 01       	movw	r30, r28
 624:	e8 0f       	add	r30, r24
 626:	f1 1d       	adc	r31, r1
 628:	81 81       	ldd	r24, Z+1	; 0x01
 62a:	85 bb       	out	0x15, r24	; 21
 62c:	35 c0       	rjmp	.+106    	; 0x698 <fnd_display_set_mode+0x146>
		break;
 62e:	c2 98       	cbi	0x18, 2	; 24
		case 5:
		FND_DIGIT_PORT &= ~(1 << FND_DIGIT_D3);
 630:	9d ec       	ldi	r25, 0xCD	; 205
		FND_DATA_PORT = fnd_font[(mode_set_num / 10) % 10];
 632:	89 9f       	mul	r24, r25
 634:	81 2d       	mov	r24, r1
 636:	11 24       	eor	r1, r1
 638:	86 95       	lsr	r24
 63a:	86 95       	lsr	r24
 63c:	86 95       	lsr	r24
 63e:	89 9f       	mul	r24, r25
 640:	91 2d       	mov	r25, r1
 642:	11 24       	eor	r1, r1
 644:	96 95       	lsr	r25
 646:	96 95       	lsr	r25
 648:	96 95       	lsr	r25
 64a:	99 0f       	add	r25, r25
 64c:	29 2f       	mov	r18, r25
 64e:	22 0f       	add	r18, r18
 650:	22 0f       	add	r18, r18
 652:	92 0f       	add	r25, r18
 654:	89 1b       	sub	r24, r25
 656:	fe 01       	movw	r30, r28
 658:	e8 0f       	add	r30, r24
 65a:	f1 1d       	adc	r31, r1
 65c:	81 81       	ldd	r24, Z+1	; 0x01
 65e:	85 bb       	out	0x15, r24	; 21
 660:	1b c0       	rjmp	.+54     	; 0x698 <fnd_display_set_mode+0x146>
		break;
 662:	c1 98       	cbi	0x18, 1	; 24
		case 6:
		FND_DIGIT_PORT &= ~(1 << FND_DIGIT_D2);
 664:	99 e2       	ldi	r25, 0x29	; 41
		FND_DATA_PORT = fnd_font[(mode_set_num / 100) % 10];
 666:	89 9f       	mul	r24, r25
 668:	81 2d       	mov	r24, r1
 66a:	11 24       	eor	r1, r1
 66c:	82 95       	swap	r24
 66e:	8f 70       	andi	r24, 0x0F	; 15
 670:	fe 01       	movw	r30, r28
 672:	e8 0f       	add	r30, r24
 674:	f1 1d       	adc	r31, r1
 676:	81 81       	ldd	r24, Z+1	; 0x01
 678:	85 bb       	out	0x15, r24	; 21
		break;
 67a:	0e c0       	rjmp	.+28     	; 0x698 <fnd_display_set_mode+0x146>
		case 7:
		FND_DIGIT_PORT &= ~(1 << FND_DIGIT_D1);
		FND_DATA_PORT = fnd_font[(mode_set_num / 1000) % 10];
 67c:	c0 98       	cbi	0x18, 0	; 24
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	68 ee       	ldi	r22, 0xE8	; 232
 682:	73 e0       	ldi	r23, 0x03	; 3
 684:	d6 d3       	rcall	.+1964   	; 0xe32 <__divmodhi4>
 686:	cb 01       	movw	r24, r22
 688:	6a e0       	ldi	r22, 0x0A	; 10
 68a:	70 e0       	ldi	r23, 0x00	; 0
 68c:	d2 d3       	rcall	.+1956   	; 0xe32 <__divmodhi4>
 68e:	fe 01       	movw	r30, r28
 690:	e8 0f       	add	r30, r24
 692:	f9 1f       	adc	r31, r25
 694:	81 81       	ldd	r24, Z+1	; 0x01
 696:	85 bb       	out	0x15, r24	; 21
 698:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <digit_select.1764>
		break;
	}
	digit_select++;
	digit_select %= 8;   // 다음 표시할 자리수 선택
 69c:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <digit_select.1764+0x1>
 6a0:	01 96       	adiw	r24, 0x01	; 1
 6a2:	87 70       	andi	r24, 0x07	; 7
 6a4:	90 78       	andi	r25, 0x80	; 128
 6a6:	99 23       	and	r25, r25
 6a8:	24 f4       	brge	.+8      	; 0x6b2 <fnd_display_set_mode+0x160>
 6aa:	01 97       	sbiw	r24, 0x01	; 1
 6ac:	88 6f       	ori	r24, 0xF8	; 248
 6ae:	9f 6f       	ori	r25, 0xFF	; 255
 6b0:	01 96       	adiw	r24, 0x01	; 1
 6b2:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <digit_select.1764+0x1>
 6b6:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <digit_select.1764>
 6ba:	2b 96       	adiw	r28, 0x0b	; 11
}
 6bc:	0f b6       	in	r0, 0x3f	; 63
 6be:	f8 94       	cli
 6c0:	de bf       	out	0x3e, r29	; 62
 6c2:	0f be       	out	0x3f, r0	; 63
 6c4:	cd bf       	out	0x3d, r28	; 61
 6c6:	df 91       	pop	r29
 6c8:	cf 91       	pop	r28
 6ca:	08 95       	ret

000006cc <init_fnd>:
 6cc:	8f ef       	ldi	r24, 0xFF	; 255

void init_fnd(void)
{
	FND_DATA_DDR = 0xff;  // 출력 모드로 설정
 6ce:	84 bb       	out	0x14, r24	; 20
	
	// FND_DIGIT_DDR |= 0xf0;   // 자릿수 선택 7654 
	FND_DIGIT_DDR |= (1 << FND_DIGIT_D1 | 1 << FND_DIGIT_D2 | 1 << FND_DIGIT_D3 | 1 << FND_DIGIT_D4 | 1 << FND_DIGIT_D5 | 1 << FND_DIGIT_D7 | 1 << FND_DIGIT_D8);
 6d0:	87 b3       	in	r24, 0x17	; 23
 6d2:	8f 6d       	ori	r24, 0xDF	; 223
 6d4:	87 bb       	out	0x17, r24	; 23
	FND_DIGIT_D6_DDR |= 1 << FND_DIGIT_D6;
 6d6:	89 9a       	sbi	0x11, 1	; 17
	
	FND_DATA_PORT = 0x00;   // fnd를 all off   
 6d8:	15 ba       	out	0x15, r1	; 21
	
	FND_DIGIT_PORT |= (1 << FND_DIGIT_D1 | 1 << FND_DIGIT_D2 | 1 << FND_DIGIT_D3 | 1 << FND_DIGIT_D4 | 1 << FND_DIGIT_D5 | 1 << FND_DIGIT_D7 | 1 << FND_DIGIT_D8);
 6da:	88 b3       	in	r24, 0x18	; 24
 6dc:	8f 6d       	ori	r24, 0xDF	; 223
 6de:	88 bb       	out	0x18, r24	; 24
	FND_DIGIT_D6_PORT |= 1 << FND_DIGIT_D6;
 6e0:	91 9a       	sbi	0x12, 1	; 18
 6e2:	08 95       	ret

000006e4 <init_led>:

extern volatile int msec_count;

void init_led(void)
{
	LED_DDR = 0xff;
 6e4:	8f ef       	ldi	r24, 0xFF	; 255
 6e6:	8a bb       	out	0x1a, r24	; 26
	LED_PORT = 0x00;
 6e8:	1b ba       	out	0x1b, r1	; 27
 6ea:	08 95       	ret

000006ec <led_blink>:
}

void led_blink(void)
{
	if (msec_count == 100)
 6ec:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <msec_count>
 6f0:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <msec_count+0x1>
 6f4:	84 36       	cpi	r24, 0x64	; 100
 6f6:	91 05       	cpc	r25, r1
 6f8:	39 f4       	brne	.+14     	; 0x708 <led_blink+0x1c>
	{
		LED_PORT = ~LED_PORT;
 6fa:	8b b3       	in	r24, 0x1b	; 27
 6fc:	80 95       	com	r24
 6fe:	8b bb       	out	0x1b, r24	; 27
		msec_count = 0;
 700:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <msec_count+0x1>
 704:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <msec_count>
 708:	08 95       	ret

0000070a <set_wash_power>:
		button_click_sound();
	}
}

void set_wash_power(uint8_t* wash_power)
{
 70a:	fc 01       	movw	r30, r24
	*wash_power = (*wash_power + 1) % 3;
 70c:	80 81       	ld	r24, Z
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	01 96       	adiw	r24, 0x01	; 1
 712:	63 e0       	ldi	r22, 0x03	; 3
 714:	70 e0       	ldi	r23, 0x00	; 0
 716:	8d d3       	rcall	.+1818   	; 0xe32 <__divmodhi4>
 718:	80 83       	st	Z, r24
 71a:	08 95       	ret

0000071c <set_total_washing_time>:
}

void set_total_washing_time(uint8_t* total_washing_time)
{
 71c:	fc 01       	movw	r30, r24
	(*total_washing_time)++;
 71e:	90 81       	ld	r25, Z
 720:	9f 5f       	subi	r25, 0xFF	; 255
	if (*total_washing_time > MAX_WAHSING_TIME) *total_washing_time = MIN_WAHSING_TIME;
 722:	99 32       	cpi	r25, 0x29	; 41
 724:	10 f4       	brcc	.+4      	; 0x72a <set_total_washing_time+0xe>
	*wash_power = (*wash_power + 1) % 3;
}

void set_total_washing_time(uint8_t* total_washing_time)
{
	(*total_washing_time)++;
 726:	90 83       	st	Z, r25
 728:	08 95       	ret
	if (*total_washing_time > MAX_WAHSING_TIME) *total_washing_time = MIN_WAHSING_TIME;
 72a:	8a e0       	ldi	r24, 0x0A	; 10
 72c:	80 83       	st	Z, r24
 72e:	08 95       	ret

00000730 <set_total_rinse_count>:
}

void set_total_rinse_count(uint8_t* total_rinse_count)
{
 730:	fc 01       	movw	r30, r24
	(*total_rinse_count)++;
 732:	90 81       	ld	r25, Z
 734:	9f 5f       	subi	r25, 0xFF	; 255
	if (*total_rinse_count > MAX_RINSE_COUNT) *total_rinse_count = MIN_RINSE_COUNT;
 736:	96 30       	cpi	r25, 0x06	; 6
 738:	10 f4       	brcc	.+4      	; 0x73e <set_total_rinse_count+0xe>
	if (*total_washing_time > MAX_WAHSING_TIME) *total_washing_time = MIN_WAHSING_TIME;
}

void set_total_rinse_count(uint8_t* total_rinse_count)
{
	(*total_rinse_count)++;
 73a:	90 83       	st	Z, r25
 73c:	08 95       	ret
	if (*total_rinse_count > MAX_RINSE_COUNT) *total_rinse_count = MIN_RINSE_COUNT;
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	80 83       	st	Z, r24
 742:	08 95       	ret

00000744 <set_total_dry_time>:
}

void set_total_dry_time(uint8_t* total_dry_time)
{
 744:	fc 01       	movw	r30, r24
	(*total_dry_time)++;
 746:	90 81       	ld	r25, Z
 748:	9f 5f       	subi	r25, 0xFF	; 255
	if (*total_dry_time > MAX_DRY_TIME) *total_dry_time = MIN_DRY_TIME;
 74a:	93 33       	cpi	r25, 0x33	; 51
 74c:	10 f4       	brcc	.+4      	; 0x752 <set_total_dry_time+0xe>
	if (*total_rinse_count > MAX_RINSE_COUNT) *total_rinse_count = MIN_RINSE_COUNT;
}

void set_total_dry_time(uint8_t* total_dry_time)
{
	(*total_dry_time)++;
 74e:	90 83       	st	Z, r25
 750:	08 95       	ret
	if (*total_dry_time > MAX_DRY_TIME) *total_dry_time = MIN_DRY_TIME;
 752:	8a e0       	ldi	r24, 0x0A	; 10
 754:	80 83       	st	Z, r24
 756:	08 95       	ret

00000758 <__vector_16>:
int buzzer_msec = 0;
int buzzer_delay = 0;

//250개의 pluse를 count(1ms)하면 자동적으로 ISR 실행, ISR은 가능한 짧게 작성
ISR(TIMER0_OVF_vect)		// 매개변수는 P278 표 12-3 참고
{
 758:	1f 92       	push	r1
 75a:	0f 92       	push	r0
 75c:	0f b6       	in	r0, 0x3f	; 63
 75e:	0f 92       	push	r0
 760:	11 24       	eor	r1, r1
 762:	2f 93       	push	r18
 764:	3f 93       	push	r19
 766:	8f 93       	push	r24
 768:	9f 93       	push	r25
	TCNT0 = 6;
 76a:	86 e0       	ldi	r24, 0x06	; 6
 76c:	82 bf       	out	0x32, r24	; 50
	fnd_clk = 1;
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <fnd_clk>
	if (is_buzzer_playing)
 774:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <is_buzzer_playing>
 778:	88 23       	and	r24, r24
 77a:	e1 f0       	breq	.+56     	; 0x7b4 <__vector_16+0x5c>
	{
		buzzer_msec++;
 77c:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <buzzer_msec>
 780:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <buzzer_msec+0x1>
 784:	01 96       	adiw	r24, 0x01	; 1
 786:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <buzzer_msec+0x1>
 78a:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <buzzer_msec>
		if (buzzer_msec == buzzer_delay)
 78e:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <buzzer_delay>
 792:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <buzzer_delay+0x1>
 796:	82 17       	cp	r24, r18
 798:	93 07       	cpc	r25, r19
 79a:	61 f4       	brne	.+24     	; 0x7b4 <__vector_16+0x5c>
		{
			is_buzzer_playing = 0;
 79c:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <is_buzzer_playing>
			buzzer_msec = 0;
 7a0:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <buzzer_msec+0x1>
 7a4:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <buzzer_msec>
			buzzer_delay = 0;
 7a8:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <buzzer_delay+0x1>
 7ac:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <buzzer_delay>
			OCR1A = 0;
 7b0:	1b bc       	out	0x2b, r1	; 43
 7b2:	1a bc       	out	0x2a, r1	; 42
		}
	}
	if (~is_stop)
	{
		msec_count++;
 7b4:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <msec_count>
 7b8:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <msec_count+0x1>
 7bc:	01 96       	adiw	r24, 0x01	; 1
 7be:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <msec_count+0x1>
 7c2:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <msec_count>
		circle_count++;	
 7c6:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <circle_count>
 7ca:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <circle_count+0x1>
 7ce:	01 96       	adiw	r24, 0x01	; 1
 7d0:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <circle_count+0x1>
 7d4:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <circle_count>
	}
}	// 이것도 조금 길다.. 더 짧게 해야함
 7d8:	9f 91       	pop	r25
 7da:	8f 91       	pop	r24
 7dc:	3f 91       	pop	r19
 7de:	2f 91       	pop	r18
 7e0:	0f 90       	pop	r0
 7e2:	0f be       	out	0x3f, r0	; 63
 7e4:	0f 90       	pop	r0
 7e6:	1f 90       	pop	r1
 7e8:	18 95       	reti

000007ea <init_parameters>:
	init_led();
	sei();
}

void init_parameters(uint8_t* is_on, uint8_t* curr_washing_mode, uint8_t* wash_power, uint8_t* total_rinse_count, uint8_t* total_washing_time, uint8_t* total_rinse_time, uint8_t* total_dry_time, uint8_t* circle_mode, int* total_left_time)
{
 7ea:	8f 92       	push	r8
 7ec:	9f 92       	push	r9
 7ee:	af 92       	push	r10
 7f0:	bf 92       	push	r11
 7f2:	cf 92       	push	r12
 7f4:	df 92       	push	r13
 7f6:	ef 92       	push	r14
 7f8:	ff 92       	push	r15
 7fa:	0f 93       	push	r16
 7fc:	1f 93       	push	r17
 7fe:	cf 93       	push	r28
 800:	df 93       	push	r29
 802:	cd b7       	in	r28, 0x3d	; 61
 804:	de b7       	in	r29, 0x3e	; 62
 806:	d7 01       	movw	r26, r14
    *is_on = 0;
 808:	fc 01       	movw	r30, r24
 80a:	10 82       	st	Z, r1
    *curr_washing_mode = 0;
 80c:	fb 01       	movw	r30, r22
 80e:	10 82       	st	Z, r1
    *wash_power = 1;          
 810:	81 e0       	ldi	r24, 0x01	; 1
 812:	fa 01       	movw	r30, r20
 814:	80 83       	st	Z, r24
    *total_rinse_count = 2;   
 816:	82 e0       	ldi	r24, 0x02	; 2
 818:	f9 01       	movw	r30, r18
 81a:	80 83       	st	Z, r24
    *total_washing_time = 15;
 81c:	8f e0       	ldi	r24, 0x0F	; 15
 81e:	f8 01       	movw	r30, r16
 820:	80 83       	st	Z, r24
    *total_rinse_time = RINSE_TIME * (*total_rinse_count);
 822:	f9 01       	movw	r30, r18
 824:	80 81       	ld	r24, Z
 826:	98 2f       	mov	r25, r24
 828:	99 0f       	add	r25, r25
 82a:	89 0f       	add	r24, r25
 82c:	98 2f       	mov	r25, r24
 82e:	99 0f       	add	r25, r25
 830:	99 0f       	add	r25, r25
 832:	89 0f       	add	r24, r25
 834:	8c 93       	st	X, r24
    *total_dry_time = 30;
 836:	8e e1       	ldi	r24, 0x1E	; 30
 838:	f6 01       	movw	r30, r12
 83a:	80 83       	st	Z, r24
    *circle_mode = 0;
 83c:	f5 01       	movw	r30, r10
 83e:	10 82       	st	Z, r1
    *total_left_time = *total_washing_time + *total_rinse_time + *total_dry_time;  
 840:	f8 01       	movw	r30, r16
 842:	20 81       	ld	r18, Z
 844:	8c 91       	ld	r24, X
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	82 0f       	add	r24, r18
 84a:	91 1d       	adc	r25, r1
 84c:	f6 01       	movw	r30, r12
 84e:	20 81       	ld	r18, Z
 850:	82 0f       	add	r24, r18
 852:	91 1d       	adc	r25, r1
 854:	f4 01       	movw	r30, r8
 856:	91 83       	std	Z+1, r25	; 0x01
 858:	80 83       	st	Z, r24
    operating_mode = 0;
 85a:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <operating_mode>
	is_stop = 0;
 85e:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <is_stop>
    msec_count = 0;
 862:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <msec_count+0x1>
 866:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <msec_count>
    circle_count = 0;
 86a:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <circle_count+0x1>
 86e:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <circle_count>
    fnd_clk = 0;
 872:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <fnd_clk>
    clk_1hz = 0;
 876:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <clk_1hz>
}
 87a:	df 91       	pop	r29
 87c:	cf 91       	pop	r28
 87e:	1f 91       	pop	r17
 880:	0f 91       	pop	r16
 882:	ff 90       	pop	r15
 884:	ef 90       	pop	r14
 886:	df 90       	pop	r13
 888:	cf 90       	pop	r12
 88a:	bf 90       	pop	r11
 88c:	af 90       	pop	r10
 88e:	9f 90       	pop	r9
 890:	8f 90       	pop	r8
 892:	08 95       	ret

00000894 <init_timer0>:
	// -----분주비 계산-----
	// (1) 16,000,000Hz/64 ==> 250,000Hz
	// (2) T(주기) 1clock의 소요시간 : 1/f = 1/250,000 ==> 0.000004sec(4us, 0.004ms)
	// (3) 8bite timer OV(OverFlow) : 0.004ms * 256 = 0.001024sec --> 1.024ms
	// 1ms마다 정확하게 INT를 띄우고 싶으면 0.004ms * 250개를 count --> 0.001sec --> 1ms
	TCNT0=6;	// TCNT: 0~256 1ms마다 TIMER0_OVF_vector로 진입
 894:	86 e0       	ldi	r24, 0x06	; 6
 896:	82 bf       	out	0x32, r24	; 50
	// TCNT0 = 6으로 설정한 이유 : 6-->256 : 50개의 펄스를 count하기 때문에 1ms가 됨
	// (4) 분주비 설정 (250,000Hz --> 250KHz) P296 표 13-1
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;		// TCCR0 |= 0xf4
 898:	83 b7       	in	r24, 0x33	; 51
 89a:	84 60       	ori	r24, 0x04	; 4
 89c:	83 bf       	out	0x33, r24	; 51
	// (5) Timer0 overflow INT를 허용(enable), P297 그림 13-5
	TIMSK |= 1 << TOIE0;
 89e:	87 b7       	in	r24, 0x37	; 55
 8a0:	81 60       	ori	r24, 0x01	; 1
 8a2:	87 bf       	out	0x37, r24	; 55
 8a4:	08 95       	ret

000008a6 <init_main>:
	}
}

void init_main(void)
{
	init_timer0();
 8a6:	f6 df       	rcall	.-20     	; 0x894 <init_timer0>
	init_timer3();
 8a8:	9e d2       	rcall	.+1340   	; 0xde6 <init_timer3>
	init_fnd();
 8aa:	10 df       	rcall	.-480    	; 0x6cc <init_fnd>
	init_L98N();
 8ac:	b4 d2       	rcall	.+1384   	; 0xe16 <init_L98N>
	init_button();
 8ae:	1c dc       	rcall	.-1992   	; 0xe8 <init_button>
 8b0:	62 dc       	rcall	.-1852   	; 0x176 <init_buzzer>
	init_buzzer();
 8b2:	18 df       	rcall	.-464    	; 0x6e4 <init_led>
 8b4:	78 94       	sei
	init_led();
 8b6:	08 95       	ret

000008b8 <on_button_check>:
 8b8:	cf 93       	push	r28
	sei();
 8ba:	df 93       	push	r29
 8bc:	ec 01       	movw	r28, r24
	TIMSK |= 1 << TOIE0;
}

void on_button_check(uint8_t* is_on)
{
	if (get_button(BUTTON0, BUTTON0PIN))
 8be:	63 e0       	ldi	r22, 0x03	; 3
 8c0:	70 e0       	ldi	r23, 0x00	; 0
 8c2:	80 e0       	ldi	r24, 0x00	; 0
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	14 dc       	rcall	.-2008   	; 0xf0 <get_button>
 8c8:	89 2b       	or	r24, r25
 8ca:	69 f0       	breq	.+26     	; 0x8e6 <on_button_check+0x2e>
	{
		*is_on = !*is_on;
 8cc:	88 81       	ld	r24, Y
 8ce:	91 e0       	ldi	r25, 0x01	; 1
 8d0:	81 11       	cpse	r24, r1
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	98 83       	st	Y, r25
		if (*is_on)
 8d6:	81 11       	cpse	r24, r1
		{
			power_on_sound();
 8d8:	04 c0       	rjmp	.+8      	; 0x8e2 <on_button_check+0x2a>
 8da:	65 dc       	rcall	.-1846   	; 0x1a6 <power_on_sound>
			LED_PORT = 0x01;
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	8b bb       	out	0x1b, r24	; 27
		}
		else
		{
			init_main();
 8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <on_button_check+0x2e>
 8e2:	e1 df       	rcall	.-62     	; 0x8a6 <init_main>
			power_off_sound();
 8e4:	8a dc       	rcall	.-1772   	; 0x1fa <power_off_sound>
 8e6:	df 91       	pop	r29
		}
	}
}
 8e8:	cf 91       	pop	r28
 8ea:	08 95       	ret

000008ec <stop_check>:
 8ec:	66 e0       	ldi	r22, 0x06	; 6

void stop_check(void)
{
	static uint8_t prev_pwm;
	if (get_button(BUTTON3, BUTTON3PIN))
 8ee:	70 e0       	ldi	r23, 0x00	; 0
 8f0:	83 e0       	ldi	r24, 0x03	; 3
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	fd db       	rcall	.-2054   	; 0xf0 <get_button>
 8f6:	89 2b       	or	r24, r25
 8f8:	d1 f0       	breq	.+52     	; 0x92e <stop_check+0x42>
	{
		button_click_sound();
 8fa:	47 dc       	rcall	.-1906   	; 0x18a <button_click_sound>
 8fc:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <is_stop>
		is_stop = !is_stop;
 900:	91 e0       	ldi	r25, 0x01	; 1
 902:	81 11       	cpse	r24, r1
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <is_stop>
 90a:	81 11       	cpse	r24, r1
		if (is_stop) 
 90c:	09 c0       	rjmp	.+18     	; 0x920 <stop_check+0x34>
 90e:	e2 e8       	ldi	r30, 0x82	; 130
		{
			prev_pwm = OCR3C;
 910:	f0 e0       	ldi	r31, 0x00	; 0
 912:	80 81       	ld	r24, Z
 914:	91 81       	ldd	r25, Z+1	; 0x01
 916:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <prev_pwm.1856>
 91a:	11 82       	std	Z+1, r1	; 0x01
			OCR3C = 0;
 91c:	10 82       	st	Z, r1
 91e:	08 95       	ret
 920:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <prev_pwm.1856>
		}
		else OCR3C = prev_pwm;
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
 92a:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
 92e:	08 95       	ret

00000930 <set_mode>:
 930:	df 92       	push	r13
	}
}

void set_mode(uint8_t* curr_washing_mode, uint8_t** params, uint8_t pwm)
{
 932:	ef 92       	push	r14
 934:	ff 92       	push	r15
 936:	0f 93       	push	r16
 938:	1f 93       	push	r17
 93a:	cf 93       	push	r28
 93c:	df 93       	push	r29
 93e:	cd b7       	in	r28, 0x3d	; 61
 940:	de b7       	in	r29, 0x3e	; 62
 942:	28 97       	sbiw	r28, 0x08	; 8
 944:	0f b6       	in	r0, 0x3f	; 63
 946:	f8 94       	cli
 948:	de bf       	out	0x3e, r29	; 62
 94a:	0f be       	out	0x3f, r0	; 63
 94c:	cd bf       	out	0x3d, r28	; 61
 94e:	8c 01       	movw	r16, r24
 950:	7b 01       	movw	r14, r22
 952:	d4 2e       	mov	r13, r20
	void (*fp[])(uint8_t*) = {set_wash_power, set_total_washing_time, set_total_rinse_count, set_total_dry_time};
 954:	88 e0       	ldi	r24, 0x08	; 8
 956:	e5 eb       	ldi	r30, 0xB5	; 181
 958:	f1 e0       	ldi	r31, 0x01	; 1
 95a:	de 01       	movw	r26, r28
 95c:	11 96       	adiw	r26, 0x01	; 1
 95e:	01 90       	ld	r0, Z+
 960:	0d 92       	st	X+, r0
 962:	8a 95       	dec	r24
 964:	e1 f7       	brne	.-8      	; 0x95e <set_mode+0x2e>
	if(get_button(BUTTON1, BUTTON1PIN))	// 세탁 설정
 966:	64 e0       	ldi	r22, 0x04	; 4
 968:	70 e0       	ldi	r23, 0x00	; 0
 96a:	81 e0       	ldi	r24, 0x01	; 1
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	c0 db       	rcall	.-2176   	; 0xf0 <get_button>
 970:	89 2b       	or	r24, r25
 972:	99 f0       	breq	.+38     	; 0x99a <set_mode+0x6a>
	{
		button_click_sound();
 974:	0a dc       	rcall	.-2028   	; 0x18a <button_click_sound>
 976:	f8 01       	movw	r30, r16
		fp[*curr_washing_mode](params[*curr_washing_mode]);
 978:	80 81       	ld	r24, Z
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	88 0f       	add	r24, r24
 97e:	99 1f       	adc	r25, r25
 980:	d7 01       	movw	r26, r14
 982:	a8 0f       	add	r26, r24
 984:	b9 1f       	adc	r27, r25
 986:	fe 01       	movw	r30, r28
 988:	e8 0f       	add	r30, r24
 98a:	f9 1f       	adc	r31, r25
 98c:	01 80       	ldd	r0, Z+1	; 0x01
 98e:	f2 81       	ldd	r31, Z+2	; 0x02
 990:	e0 2d       	mov	r30, r0
 992:	8d 91       	ld	r24, X+
 994:	9c 91       	ld	r25, X
 996:	09 95       	icall
 998:	3e c0       	rjmp	.+124    	; 0xa16 <set_mode+0xe6>
 99a:	65 e0       	ldi	r22, 0x05	; 5
	}
	else if(get_button(BUTTON2, BUTTON2PIN))	// 다음 설정 모드
 99c:	70 e0       	ldi	r23, 0x00	; 0
 99e:	82 e0       	ldi	r24, 0x02	; 2
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	a6 db       	rcall	.-2228   	; 0xf0 <get_button>
 9a4:	89 2b       	or	r24, r25
 9a6:	01 f1       	breq	.+64     	; 0x9e8 <set_mode+0xb8>
 9a8:	f8 01       	movw	r30, r16
	{
		(*curr_washing_mode)++;
 9aa:	80 81       	ld	r24, Z
 9ac:	8f 5f       	subi	r24, 0xFF	; 255
 9ae:	80 83       	st	Z, r24
 9b0:	84 30       	cpi	r24, 0x04	; 4
		if (*curr_washing_mode == 4)
 9b2:	71 f4       	brne	.+28     	; 0x9d0 <set_mode+0xa0>
 9b4:	81 e0       	ldi	r24, 0x01	; 1
		{
			operating_mode = 1;
 9b6:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <operating_mode>
 9ba:	80 83       	st	Z, r24
			*curr_washing_mode = 1;
 9bc:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <msec_count+0x1>
			msec_count = 0;
 9c0:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <msec_count>
 9c4:	4d 2d       	mov	r20, r13
			OCR3C = pwm;
 9c6:	50 e0       	ldi	r21, 0x00	; 0
 9c8:	50 93 83 00 	sts	0x0083, r21	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
 9cc:	40 93 82 00 	sts	0x0082, r20	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
 9d0:	81 e0       	ldi	r24, 0x01	; 1
		}
		LED_PORT = 1 << *curr_washing_mode;
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	f8 01       	movw	r30, r16
 9d6:	00 80       	ld	r0, Z
 9d8:	02 c0       	rjmp	.+4      	; 0x9de <set_mode+0xae>
 9da:	88 0f       	add	r24, r24
 9dc:	99 1f       	adc	r25, r25
 9de:	0a 94       	dec	r0
 9e0:	e2 f7       	brpl	.-8      	; 0x9da <set_mode+0xaa>
 9e2:	8b bb       	out	0x1b, r24	; 27
		button_click_sound();
 9e4:	d2 db       	rcall	.-2140   	; 0x18a <button_click_sound>
 9e6:	17 c0       	rjmp	.+46     	; 0xa16 <set_mode+0xe6>
 9e8:	66 e0       	ldi	r22, 0x06	; 6
	}
	else if(get_button(BUTTON3, BUTTON3PIN))	// 이전 설정 모드
 9ea:	70 e0       	ldi	r23, 0x00	; 0
 9ec:	83 e0       	ldi	r24, 0x03	; 3
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	7f db       	rcall	.-2306   	; 0xf0 <get_button>
 9f2:	89 2b       	or	r24, r25
 9f4:	81 f0       	breq	.+32     	; 0xa16 <set_mode+0xe6>
 9f6:	f8 01       	movw	r30, r16
	{
		*curr_washing_mode = (*curr_washing_mode) ? *curr_washing_mode - 1 : 0;
 9f8:	80 81       	ld	r24, Z
 9fa:	81 11       	cpse	r24, r1
 9fc:	81 50       	subi	r24, 0x01	; 1
 9fe:	f8 01       	movw	r30, r16
 a00:	80 83       	st	Z, r24
 a02:	21 e0       	ldi	r18, 0x01	; 1
		LED_PORT = 1 << *curr_washing_mode;
 a04:	30 e0       	ldi	r19, 0x00	; 0
 a06:	a9 01       	movw	r20, r18
 a08:	02 c0       	rjmp	.+4      	; 0xa0e <set_mode+0xde>
 a0a:	44 0f       	add	r20, r20
 a0c:	55 1f       	adc	r21, r21
 a0e:	8a 95       	dec	r24
 a10:	e2 f7       	brpl	.-8      	; 0xa0a <set_mode+0xda>
 a12:	4b bb       	out	0x1b, r20	; 27
		button_click_sound();
 a14:	ba db       	rcall	.-2188   	; 0x18a <button_click_sound>
 a16:	28 96       	adiw	r28, 0x08	; 8
	}
}
 a18:	0f b6       	in	r0, 0x3f	; 63
 a1a:	f8 94       	cli
 a1c:	de bf       	out	0x3e, r29	; 62
 a1e:	0f be       	out	0x3f, r0	; 63
 a20:	cd bf       	out	0x3d, r28	; 61
 a22:	df 91       	pop	r29
 a24:	cf 91       	pop	r28
 a26:	1f 91       	pop	r17
 a28:	0f 91       	pop	r16
 a2a:	ff 90       	pop	r15
 a2c:	ef 90       	pop	r14
 a2e:	df 90       	pop	r13
 a30:	08 95       	ret

00000a32 <update_sec_circle>:
 a32:	cf 93       	push	r28
		}
	}
}

void update_sec_circle(uint8_t* circle_mode, uint8_t wash_power)
{
 a34:	df 93       	push	r29
 a36:	00 d0       	rcall	.+0      	; 0xa38 <update_sec_circle+0x6>
 a38:	1f 92       	push	r1
 a3a:	cd b7       	in	r28, 0x3d	; 61
 a3c:	de b7       	in	r29, 0x3e	; 62
 a3e:	fc 01       	movw	r30, r24
	uint8_t circle_cycle[] = {150, 100, 50}; 
 a40:	86 e9       	ldi	r24, 0x96	; 150
 a42:	89 83       	std	Y+1, r24	; 0x01
 a44:	84 e6       	ldi	r24, 0x64	; 100
 a46:	8a 83       	std	Y+2, r24	; 0x02
 a48:	82 e3       	ldi	r24, 0x32	; 50
 a4a:	8b 83       	std	Y+3, r24	; 0x03
	if(msec_count >= 1000)
 a4c:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <msec_count>
 a50:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <msec_count+0x1>
 a54:	88 3e       	cpi	r24, 0xE8	; 232
 a56:	93 40       	sbci	r25, 0x03	; 3
 a58:	3c f0       	brlt	.+14     	; 0xa68 <update_sec_circle+0x36>
	{
		msec_count = 0;
 a5a:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <msec_count+0x1>
 a5e:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <msec_count>
		clk_1hz = 1;
 a62:	81 e0       	ldi	r24, 0x01	; 1
 a64:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <clk_1hz>
	}
	if(circle_count >= circle_cycle[wash_power])
 a68:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <circle_count>
 a6c:	30 91 d0 01 	lds	r19, 0x01D0	; 0x8001d0 <circle_count+0x1>
 a70:	de 01       	movw	r26, r28
 a72:	a6 0f       	add	r26, r22
 a74:	b1 1d       	adc	r27, r1
 a76:	11 96       	adiw	r26, 0x01	; 1
 a78:	8c 91       	ld	r24, X
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	28 17       	cp	r18, r24
 a7e:	39 07       	cpc	r19, r25
 a80:	5c f0       	brlt	.+22     	; 0xa98 <update_sec_circle+0x66>
	{
		circle_count = 0;
 a82:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <circle_count+0x1>
 a86:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <circle_count>
		*circle_mode = (*circle_mode + 1) % 6;
 a8a:	80 81       	ld	r24, Z
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	01 96       	adiw	r24, 0x01	; 1
 a90:	66 e0       	ldi	r22, 0x06	; 6
 a92:	70 e0       	ldi	r23, 0x00	; 0
 a94:	ce d1       	rcall	.+924    	; 0xe32 <__divmodhi4>
 a96:	80 83       	st	Z, r24
	}
 a98:	0f 90       	pop	r0
 a9a:	0f 90       	pop	r0
 a9c:	0f 90       	pop	r0
 a9e:	df 91       	pop	r29
 aa0:	cf 91       	pop	r28
 aa2:	08 95       	ret

00000aa4 <operate>:
	(*total_dry_time)++;
	if (*total_dry_time > MAX_DRY_TIME) *total_dry_time = MIN_DRY_TIME;
}

void operate(uint8_t* curr_washing_mode, uint8_t** left_mode_time, int* left_total_sec_count, uint8_t* circle_mode, uint8_t wash_power)
{
 aa4:	cf 92       	push	r12
 aa6:	df 92       	push	r13
 aa8:	ef 92       	push	r14
 aaa:	ff 92       	push	r15
 aac:	0f 93       	push	r16
 aae:	cf 93       	push	r28
 ab0:	df 93       	push	r29
 ab2:	7c 01       	movw	r14, r24
 ab4:	eb 01       	movw	r28, r22
 ab6:	6a 01       	movw	r12, r20
 ab8:	c9 01       	movw	r24, r18
 aba:	60 2f       	mov	r22, r16
	static uint8_t prev_pwm = 0;
	update_sec_circle(circle_mode, wash_power);
 abc:	ba df       	rcall	.-140    	; 0xa32 <update_sec_circle>
	if (clk_1hz)
 abe:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <clk_1hz>
 ac2:	88 23       	and	r24, r24
 ac4:	09 f4       	brne	.+2      	; 0xac8 <operate+0x24>
 ac6:	8b c0       	rjmp	.+278    	; 0xbde <operate+0x13a>
	{
		if (*curr_washing_mode != 3)
 ac8:	d7 01       	movw	r26, r14
 aca:	8c 91       	ld	r24, X
 acc:	83 30       	cpi	r24, 0x03	; 3
 ace:	31 f0       	breq	.+12     	; 0xadc <operate+0x38>
			PORTF ^= 0xc0; 
 ad0:	e2 e6       	ldi	r30, 0x62	; 98
 ad2:	f0 e0       	ldi	r31, 0x00	; 0
 ad4:	90 81       	ld	r25, Z
 ad6:	80 ec       	ldi	r24, 0xC0	; 192
 ad8:	89 27       	eor	r24, r25
 ada:	80 83       	st	Z, r24
		clk_1hz = 0;
 adc:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <clk_1hz>
		
		if (*curr_washing_mode == 2 && *left_mode_time[1] % RINSE_TIME == 0)
 ae0:	f7 01       	movw	r30, r14
 ae2:	80 81       	ld	r24, Z
 ae4:	82 30       	cpi	r24, 0x02	; 2
 ae6:	09 f5       	brne	.+66     	; 0xb2a <operate+0x86>
 ae8:	ea 81       	ldd	r30, Y+2	; 0x02
 aea:	fb 81       	ldd	r31, Y+3	; 0x03
 aec:	20 81       	ld	r18, Z
 aee:	89 e8       	ldi	r24, 0x89	; 137
 af0:	28 9f       	mul	r18, r24
 af2:	81 2d       	mov	r24, r1
 af4:	11 24       	eor	r1, r1
 af6:	86 95       	lsr	r24
 af8:	86 95       	lsr	r24
 afa:	86 95       	lsr	r24
 afc:	98 2f       	mov	r25, r24
 afe:	99 0f       	add	r25, r25
 b00:	89 0f       	add	r24, r25
 b02:	98 2f       	mov	r25, r24
 b04:	99 0f       	add	r25, r25
 b06:	99 0f       	add	r25, r25
 b08:	89 0f       	add	r24, r25
 b0a:	28 1b       	sub	r18, r24
 b0c:	41 f4       	brne	.+16     	; 0xb1e <operate+0x7a>
		{
			OCR3C = prev_pwm;
 b0e:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <prev_pwm.1883>
 b12:	90 e0       	ldi	r25, 0x00	; 0
 b14:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
 b18:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
 b1c:	06 c0       	rjmp	.+12     	; 0xb2a <operate+0x86>
		}
		else if (*curr_washing_mode == 2 && *left_mode_time[1] % RINSE_TIME == 2)
 b1e:	22 30       	cpi	r18, 0x02	; 2
 b20:	21 f4       	brne	.+8      	; 0xb2a <operate+0x86>
		{
			OCR3C = 0;
 b22:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
 b26:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
		}
		
		(*left_mode_time[(*curr_washing_mode)-1])--;
 b2a:	d7 01       	movw	r26, r14
 b2c:	ec 91       	ld	r30, X
 b2e:	f0 e0       	ldi	r31, 0x00	; 0
 b30:	e1 50       	subi	r30, 0x01	; 1
 b32:	f0 48       	sbci	r31, 0x80	; 128
 b34:	ee 0f       	add	r30, r30
 b36:	ff 1f       	adc	r31, r31
 b38:	ec 0f       	add	r30, r28
 b3a:	fd 1f       	adc	r31, r29
 b3c:	01 90       	ld	r0, Z+
 b3e:	f0 81       	ld	r31, Z
 b40:	e0 2d       	mov	r30, r0
 b42:	80 81       	ld	r24, Z
 b44:	81 50       	subi	r24, 0x01	; 1
 b46:	80 83       	st	Z, r24
		(*left_total_sec_count)--;
 b48:	f6 01       	movw	r30, r12
 b4a:	80 81       	ld	r24, Z
 b4c:	91 81       	ldd	r25, Z+1	; 0x01
 b4e:	01 97       	sbiw	r24, 0x01	; 1
 b50:	91 83       	std	Z+1, r25	; 0x01
 b52:	80 83       	st	Z, r24
		
		if (*left_mode_time[*curr_washing_mode - 1] == 2)
 b54:	ec 91       	ld	r30, X
 b56:	f0 e0       	ldi	r31, 0x00	; 0
 b58:	e1 50       	subi	r30, 0x01	; 1
 b5a:	f0 48       	sbci	r31, 0x80	; 128
 b5c:	ee 0f       	add	r30, r30
 b5e:	ff 1f       	adc	r31, r31
 b60:	ec 0f       	add	r30, r28
 b62:	fd 1f       	adc	r31, r29
 b64:	01 90       	ld	r0, Z+
 b66:	f0 81       	ld	r31, Z
 b68:	e0 2d       	mov	r30, r0
 b6a:	80 81       	ld	r24, Z
 b6c:	82 30       	cpi	r24, 0x02	; 2
 b6e:	41 f4       	brne	.+16     	; 0xb80 <operate+0xdc>
		{
			prev_pwm = OCR3C;
 b70:	e2 e8       	ldi	r30, 0x82	; 130
 b72:	f0 e0       	ldi	r31, 0x00	; 0
 b74:	80 81       	ld	r24, Z
 b76:	91 81       	ldd	r25, Z+1	; 0x01
 b78:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <prev_pwm.1883>
			OCR3C = 0;
 b7c:	11 82       	std	Z+1, r1	; 0x01
 b7e:	10 82       	st	Z, r1
		}
		
		if (*left_mode_time[(*curr_washing_mode)-1] == 0)
 b80:	d7 01       	movw	r26, r14
 b82:	2c 91       	ld	r18, X
 b84:	82 2f       	mov	r24, r18
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	81 50       	subi	r24, 0x01	; 1
 b8a:	90 48       	sbci	r25, 0x80	; 128
 b8c:	88 0f       	add	r24, r24
 b8e:	99 1f       	adc	r25, r25
 b90:	c8 0f       	add	r28, r24
 b92:	d9 1f       	adc	r29, r25
 b94:	e8 81       	ld	r30, Y
 b96:	f9 81       	ldd	r31, Y+1	; 0x01
 b98:	80 81       	ld	r24, Z
 b9a:	81 11       	cpse	r24, r1
 b9c:	20 c0       	rjmp	.+64     	; 0xbde <operate+0x13a>
		{
			(*curr_washing_mode)++;
 b9e:	2f 5f       	subi	r18, 0xFF	; 255
 ba0:	2c 93       	st	X, r18
			LED_PORT = 1 << *curr_washing_mode;
 ba2:	81 e0       	ldi	r24, 0x01	; 1
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	02 c0       	rjmp	.+4      	; 0xbac <operate+0x108>
 ba8:	88 0f       	add	r24, r24
 baa:	99 1f       	adc	r25, r25
 bac:	2a 95       	dec	r18
 bae:	e2 f7       	brpl	.-8      	; 0xba8 <operate+0x104>
 bb0:	8b bb       	out	0x1b, r24	; 27
			if (*curr_washing_mode == 3) OCR3C = prev_pwm + DRY_PWM;
 bb2:	8c 91       	ld	r24, X
 bb4:	83 30       	cpi	r24, 0x03	; 3
 bb6:	49 f4       	brne	.+18     	; 0xbca <operate+0x126>
 bb8:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <prev_pwm.1883>
 bbc:	90 e0       	ldi	r25, 0x00	; 0
 bbe:	88 96       	adiw	r24, 0x28	; 40
 bc0:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
 bc4:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
 bc8:	0a c0       	rjmp	.+20     	; 0xbde <operate+0x13a>
			else if (*curr_washing_mode == 4)
 bca:	84 30       	cpi	r24, 0x04	; 4
 bcc:	41 f4       	brne	.+16     	; 0xbde <operate+0x13a>
			{
				OCR3C = 0;
 bce:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
 bd2:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
				LED_PORT = 0x00;
 bd6:	1b ba       	out	0x1b, r1	; 27
				operating_mode = 2;
 bd8:	82 e0       	ldi	r24, 0x02	; 2
 bda:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <operating_mode>
			}
		}
	}
}
 bde:	df 91       	pop	r29
 be0:	cf 91       	pop	r28
 be2:	0f 91       	pop	r16
 be4:	ff 90       	pop	r15
 be6:	ef 90       	pop	r14
 be8:	df 90       	pop	r13
 bea:	cf 90       	pop	r12
 bec:	08 95       	ret

00000bee <main>:
		circle_count++;	
	}
}	// 이것도 조금 길다.. 더 짧게 해야함

int main(void)
{
 bee:	cf 93       	push	r28
 bf0:	df 93       	push	r29
 bf2:	cd b7       	in	r28, 0x3d	; 61
 bf4:	de b7       	in	r29, 0x3e	; 62
 bf6:	6b 97       	sbiw	r28, 0x1b	; 27
 bf8:	0f b6       	in	r0, 0x3f	; 63
 bfa:	f8 94       	cli
 bfc:	de bf       	out	0x3e, r29	; 62
 bfe:	0f be       	out	0x3f, r0	; 63
 c00:	cd bf       	out	0x3d, r28	; 61
	uint8_t is_on = 0;
 c02:	19 82       	std	Y+1, r1	; 0x01
	
	uint8_t curr_washing_mode = 0;
 c04:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t wash_power = 1;
 c06:	81 e0       	ldi	r24, 0x01	; 1
 c08:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t total_rinse_count = 2;
 c0a:	82 e0       	ldi	r24, 0x02	; 2
 c0c:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t total_washing_time = 15;
 c0e:	8f e0       	ldi	r24, 0x0F	; 15
 c10:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t total_rinse_time = RINSE_TIME * total_rinse_count;
 c12:	8e e1       	ldi	r24, 0x1E	; 30
 c14:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t total_dry_time = 30;
 c16:	8f 83       	std	Y+7, r24	; 0x07
	
	uint8_t circle_mode = 0; 
 c18:	18 86       	std	Y+8, r1	; 0x08
	
	uint8_t* left_mode_time[] = {&total_washing_time, &total_rinse_time, &total_dry_time};
 c1a:	9e 01       	movw	r18, r28
 c1c:	2b 5f       	subi	r18, 0xFB	; 251
 c1e:	3f 4f       	sbci	r19, 0xFF	; 255
 c20:	3a 87       	std	Y+10, r19	; 0x0a
 c22:	29 87       	std	Y+9, r18	; 0x09
 c24:	ce 01       	movw	r24, r28
 c26:	06 96       	adiw	r24, 0x06	; 6
 c28:	9c 87       	std	Y+12, r25	; 0x0c
 c2a:	8b 87       	std	Y+11, r24	; 0x0b
 c2c:	01 96       	adiw	r24, 0x01	; 1
 c2e:	9e 87       	std	Y+14, r25	; 0x0e
 c30:	8d 87       	std	Y+13, r24	; 0x0d
	int total_left_time = total_washing_time + total_rinse_time + total_dry_time;
 c32:	4b e4       	ldi	r20, 0x4B	; 75
 c34:	50 e0       	ldi	r21, 0x00	; 0
 c36:	58 8b       	std	Y+16, r21	; 0x10
 c38:	4f 87       	std	Y+15, r20	; 0x0f
	
	uint8_t pwms[] = {POWER0_PWM, POWER1_PWM, POWER2_PWM};
 c3a:	40 e5       	ldi	r20, 0x50	; 80
 c3c:	49 8b       	std	Y+17, r20	; 0x11
 c3e:	44 e6       	ldi	r20, 0x64	; 100
 c40:	4a 8b       	std	Y+18, r20	; 0x12
 c42:	48 e7       	ldi	r20, 0x78	; 120
 c44:	4b 8b       	std	Y+19, r20	; 0x13
	uint8_t* params[] = {&wash_power, &total_washing_time, &total_rinse_count, &total_dry_time};
 c46:	ae 01       	movw	r20, r28
 c48:	4d 5f       	subi	r20, 0xFD	; 253
 c4a:	5f 4f       	sbci	r21, 0xFF	; 255
 c4c:	5d 8b       	std	Y+21, r21	; 0x15
 c4e:	4c 8b       	std	Y+20, r20	; 0x14
 c50:	3f 8b       	std	Y+23, r19	; 0x17
 c52:	2e 8b       	std	Y+22, r18	; 0x16
 c54:	21 50       	subi	r18, 0x01	; 1
 c56:	31 09       	sbc	r19, r1
 c58:	39 8f       	std	Y+25, r19	; 0x19
 c5a:	28 8f       	std	Y+24, r18	; 0x18
 c5c:	9b 8f       	std	Y+27, r25	; 0x1b
 c5e:	8a 8f       	std	Y+26, r24	; 0x1a
	
	uint8_t done_total_time = 0;
 c60:	71 2c       	mov	r7, r1
	
	while(1)
	{	
		on_button_check(&is_on);
 c62:	ce 01       	movw	r24, r28
 c64:	01 96       	adiw	r24, 0x01	; 1
 c66:	28 de       	rcall	.-944    	; 0x8b8 <on_button_check>
		if (!is_on)
 c68:	89 81       	ldd	r24, Y+1	; 0x01
 c6a:	81 11       	cpse	r24, r1
		{
			init_main();
 c6c:	19 c0       	rjmp	.+50     	; 0xca0 <main+0xb2>
 c6e:	1b de       	rcall	.-970    	; 0x8a6 <init_main>
			init_parameters(&is_on, &curr_washing_mode, &wash_power, &total_rinse_count, &total_washing_time, &total_rinse_time, &total_dry_time, &circle_mode, &total_left_time);
 c70:	ce 01       	movw	r24, r28
 c72:	0f 96       	adiw	r24, 0x0f	; 15
 c74:	4c 01       	movw	r8, r24
 c76:	07 97       	sbiw	r24, 0x07	; 7
 c78:	5c 01       	movw	r10, r24
 c7a:	01 97       	sbiw	r24, 0x01	; 1
 c7c:	6c 01       	movw	r12, r24
 c7e:	01 97       	sbiw	r24, 0x01	; 1
 c80:	7c 01       	movw	r14, r24
 c82:	8e 01       	movw	r16, r28
 c84:	0b 5f       	subi	r16, 0xFB	; 251
 c86:	1f 4f       	sbci	r17, 0xFF	; 255
 c88:	9e 01       	movw	r18, r28
 c8a:	2c 5f       	subi	r18, 0xFC	; 252
 c8c:	3f 4f       	sbci	r19, 0xFF	; 255
 c8e:	ae 01       	movw	r20, r28
 c90:	4d 5f       	subi	r20, 0xFD	; 253
 c92:	5f 4f       	sbci	r21, 0xFF	; 255
 c94:	be 01       	movw	r22, r28
 c96:	6e 5f       	subi	r22, 0xFE	; 254
 c98:	7f 4f       	sbci	r23, 0xFF	; 255
 c9a:	05 97       	sbiw	r24, 0x05	; 5
 c9c:	a6 dd       	rcall	.-1204   	; 0x7ea <init_parameters>
			continue;
 c9e:	e1 cf       	rjmp	.-62     	; 0xc62 <main+0x74>
		}
		
		if (!operating_mode)
 ca0:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <operating_mode>
 ca4:	81 11       	cpse	r24, r1
 ca6:	38 c0       	rjmp	.+112    	; 0xd18 <main+0x12a>
		{
			set_mode(&curr_washing_mode, params, pwms[wash_power]);
 ca8:	8b 81       	ldd	r24, Y+3	; 0x03
 caa:	e1 e1       	ldi	r30, 0x11	; 17
 cac:	f0 e0       	ldi	r31, 0x00	; 0
 cae:	ec 0f       	add	r30, r28
 cb0:	fd 1f       	adc	r31, r29
 cb2:	e8 0f       	add	r30, r24
 cb4:	f1 1d       	adc	r31, r1
 cb6:	40 81       	ld	r20, Z
 cb8:	be 01       	movw	r22, r28
 cba:	6c 5e       	subi	r22, 0xEC	; 236
 cbc:	7f 4f       	sbci	r23, 0xFF	; 255
 cbe:	ce 01       	movw	r24, r28
 cc0:	02 96       	adiw	r24, 0x02	; 2
 cc2:	36 de       	rcall	.-916    	; 0x930 <set_mode>
			total_rinse_time = RINSE_TIME * total_rinse_count;
 cc4:	8c 81       	ldd	r24, Y+4	; 0x04
 cc6:	68 2f       	mov	r22, r24
 cc8:	66 0f       	add	r22, r22
 cca:	68 0f       	add	r22, r24
 ccc:	86 2f       	mov	r24, r22
 cce:	88 0f       	add	r24, r24
 cd0:	88 0f       	add	r24, r24
 cd2:	68 0f       	add	r22, r24
 cd4:	6e 83       	std	Y+6, r22	; 0x06
			total_left_time = total_washing_time + total_rinse_time + total_dry_time;
 cd6:	8d 81       	ldd	r24, Y+5	; 0x05
 cd8:	70 e0       	ldi	r23, 0x00	; 0
 cda:	68 0f       	add	r22, r24
 cdc:	71 1d       	adc	r23, r1
 cde:	8f 81       	ldd	r24, Y+7	; 0x07
 ce0:	68 0f       	add	r22, r24
 ce2:	71 1d       	adc	r23, r1
 ce4:	78 8b       	std	Y+16, r23	; 0x10
 ce6:	6f 87       	std	Y+15, r22	; 0x0f
			done_total_time = total_left_time;
 ce8:	76 2e       	mov	r7, r22
			if(fnd_clk)
 cea:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <fnd_clk>
 cee:	88 23       	and	r24, r24
 cf0:	09 f4       	brne	.+2      	; 0xcf4 <main+0x106>
 cf2:	b7 cf       	rjmp	.-146    	; 0xc62 <main+0x74>
			{
				fnd_clk = 0;
 cf4:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <fnd_clk>
				fnd_display_set_mode(*params[curr_washing_mode], total_left_time);
 cf8:	ea 81       	ldd	r30, Y+2	; 0x02
 cfa:	f0 e0       	ldi	r31, 0x00	; 0
 cfc:	ee 0f       	add	r30, r30
 cfe:	ff 1f       	adc	r31, r31
 d00:	81 e0       	ldi	r24, 0x01	; 1
 d02:	90 e0       	ldi	r25, 0x00	; 0
 d04:	8c 0f       	add	r24, r28
 d06:	9d 1f       	adc	r25, r29
 d08:	e8 0f       	add	r30, r24
 d0a:	f9 1f       	adc	r31, r25
 d0c:	03 88       	ldd	r0, Z+19	; 0x13
 d0e:	f4 89       	ldd	r31, Z+20	; 0x14
 d10:	e0 2d       	mov	r30, r0
 d12:	80 81       	ld	r24, Z
 d14:	1e dc       	rcall	.-1988   	; 0x552 <fnd_display_set_mode>
			}
		}
		else if (operating_mode == 1)
 d16:	a5 cf       	rjmp	.-182    	; 0xc62 <main+0x74>
 d18:	81 30       	cpi	r24, 0x01	; 1
		{
			stop_check();
 d1a:	81 f5       	brne	.+96     	; 0xd7c <main+0x18e>
 d1c:	e7 dd       	rcall	.-1074   	; 0x8ec <stop_check>
			if (!is_stop)
 d1e:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <is_stop>
 d22:	81 11       	cpse	r24, r1
 d24:	0d c0       	rjmp	.+26     	; 0xd40 <main+0x152>
				operate(&curr_washing_mode, left_mode_time, &total_left_time, &circle_mode, wash_power);
 d26:	0b 81       	ldd	r16, Y+3	; 0x03
 d28:	9e 01       	movw	r18, r28
 d2a:	28 5f       	subi	r18, 0xF8	; 248
 d2c:	3f 4f       	sbci	r19, 0xFF	; 255
 d2e:	ae 01       	movw	r20, r28
 d30:	41 5f       	subi	r20, 0xF1	; 241
 d32:	5f 4f       	sbci	r21, 0xFF	; 255
 d34:	be 01       	movw	r22, r28
 d36:	67 5f       	subi	r22, 0xF7	; 247
 d38:	7f 4f       	sbci	r23, 0xFF	; 255
 d3a:	ce 01       	movw	r24, r28
 d3c:	02 96       	adiw	r24, 0x02	; 2
 d3e:	b2 de       	rcall	.-668    	; 0xaa4 <operate>
			if(fnd_clk)
 d40:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <fnd_clk>
 d44:	88 23       	and	r24, r24
 d46:	09 f4       	brne	.+2      	; 0xd4a <main+0x15c>
 d48:	8c cf       	rjmp	.-232    	; 0xc62 <main+0x74>
			{
				fnd_clk = 0;
 d4a:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <fnd_clk>
				fnd_display_left_time(circle_mode, *left_mode_time[curr_washing_mode-1], total_left_time, 0);
 d4e:	4f 85       	ldd	r20, Y+15	; 0x0f
 d50:	58 89       	ldd	r21, Y+16	; 0x10
 d52:	ea 81       	ldd	r30, Y+2	; 0x02
 d54:	f0 e0       	ldi	r31, 0x00	; 0
 d56:	31 97       	sbiw	r30, 0x01	; 1
 d58:	ee 0f       	add	r30, r30
 d5a:	ff 1f       	adc	r31, r31
 d5c:	81 e0       	ldi	r24, 0x01	; 1
 d5e:	90 e0       	ldi	r25, 0x00	; 0
 d60:	8c 0f       	add	r24, r28
 d62:	9d 1f       	adc	r25, r29
 d64:	e8 0f       	add	r30, r24
 d66:	f9 1f       	adc	r31, r25
 d68:	00 84       	ldd	r0, Z+8	; 0x08
 d6a:	f1 85       	ldd	r31, Z+9	; 0x09
 d6c:	e0 2d       	mov	r30, r0
 d6e:	60 81       	ld	r22, Z
 d70:	70 e0       	ldi	r23, 0x00	; 0
 d72:	88 85       	ldd	r24, Y+8	; 0x08
 d74:	20 e0       	ldi	r18, 0x00	; 0
 d76:	90 e0       	ldi	r25, 0x00	; 0
 d78:	ce da       	rcall	.-2660   	; 0x316 <fnd_display_left_time>
			}
		}
		else if (operating_mode == 2)
 d7a:	73 cf       	rjmp	.-282    	; 0xc62 <main+0x74>
 d7c:	82 30       	cpi	r24, 0x02	; 2
 d7e:	09 f0       	breq	.+2      	; 0xd82 <main+0x194>
		{	
			static uint8_t is_done = 0;
			wash_complete_sound(&is_done);
 d80:	70 cf       	rjmp	.-288    	; 0xc62 <main+0x74>
 d82:	89 ec       	ldi	r24, 0xC9	; 201
 d84:	91 e0       	ldi	r25, 0x01	; 1
 d86:	63 da       	rcall	.-2874   	; 0x24e <wash_complete_sound>
			led_blink();
 d88:	b1 dc       	rcall	.-1694   	; 0x6ec <led_blink>
 d8a:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <fnd_clk>
			if(fnd_clk)
 d8e:	88 23       	and	r24, r24
 d90:	51 f0       	breq	.+20     	; 0xda6 <main+0x1b8>
			{
				fnd_clk = 0;
 d92:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <fnd_clk>
				fnd_display_left_time(circle_mode, 0, done_total_time, 1);
 d96:	47 2d       	mov	r20, r7
 d98:	50 e0       	ldi	r21, 0x00	; 0
 d9a:	88 85       	ldd	r24, Y+8	; 0x08
 d9c:	21 e0       	ldi	r18, 0x01	; 1
 d9e:	60 e0       	ldi	r22, 0x00	; 0
 da0:	70 e0       	ldi	r23, 0x00	; 0
 da2:	90 e0       	ldi	r25, 0x00	; 0
 da4:	b8 da       	rcall	.-2704   	; 0x316 <fnd_display_left_time>
			}
			if (is_done)
 da6:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <is_done.1831>
 daa:	88 23       	and	r24, r24
 dac:	09 f4       	brne	.+2      	; 0xdb0 <main+0x1c2>
 dae:	59 cf       	rjmp	.-334    	; 0xc62 <main+0x74>
			{
				is_done = 0;
 db0:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <is_done.1831>
				init_main();
 db4:	78 dd       	rcall	.-1296   	; 0x8a6 <init_main>
 db6:	ce 01       	movw	r24, r28
				init_parameters(&is_on, &curr_washing_mode, &wash_power, &total_rinse_count, &total_washing_time, &total_rinse_time, &total_dry_time, &circle_mode, &total_left_time);
 db8:	0f 96       	adiw	r24, 0x0f	; 15
 dba:	4c 01       	movw	r8, r24
 dbc:	07 97       	sbiw	r24, 0x07	; 7
 dbe:	5c 01       	movw	r10, r24
 dc0:	01 97       	sbiw	r24, 0x01	; 1
 dc2:	6c 01       	movw	r12, r24
 dc4:	01 97       	sbiw	r24, 0x01	; 1
 dc6:	7c 01       	movw	r14, r24
 dc8:	8e 01       	movw	r16, r28
 dca:	0b 5f       	subi	r16, 0xFB	; 251
 dcc:	1f 4f       	sbci	r17, 0xFF	; 255
 dce:	9e 01       	movw	r18, r28
 dd0:	2c 5f       	subi	r18, 0xFC	; 252
 dd2:	3f 4f       	sbci	r19, 0xFF	; 255
 dd4:	ae 01       	movw	r20, r28
 dd6:	4d 5f       	subi	r20, 0xFD	; 253
 dd8:	5f 4f       	sbci	r21, 0xFF	; 255
 dda:	be 01       	movw	r22, r28
 ddc:	6e 5f       	subi	r22, 0xFE	; 254
 dde:	7f 4f       	sbci	r23, 0xFF	; 255
 de0:	05 97       	sbiw	r24, 0x05	; 5
 de2:	03 dd       	rcall	.-1530   	; 0x7ea <init_parameters>
 de4:	3e cf       	rjmp	.-388    	; 0xc62 <main+0x74>

00000de6 <init_timer3>:
	BTN1 : speed up	(OC3C : 20씩 증가 max 250)
	BTN2 : seed down (OC3C : 20씩 감소 min 60)
*/
void init_timer3(void)
{
	DDRE |= 1 << 3 | 1 << 5;	// PE4 사용중이기 때문에 PE3과 PE5만 	
 de6:	82 b1       	in	r24, 0x02	; 2
 de8:	88 62       	ori	r24, 0x28	; 40
 dea:	82 b9       	out	0x02, r24	; 2
	// 16bit timer 3번의 모드 5: 8비트 고속 PWM (P348 표 15-6)
	TCCR3A |= 1 << WGM30;
 dec:	ab e8       	ldi	r26, 0x8B	; 139
 dee:	b0 e0       	ldi	r27, 0x00	; 0
 df0:	8c 91       	ld	r24, X
 df2:	81 60       	ori	r24, 0x01	; 1
 df4:	8c 93       	st	X, r24
	TCCR3B |= 1 << WGM32;
 df6:	ea e8       	ldi	r30, 0x8A	; 138
 df8:	f0 e0       	ldi	r31, 0x00	; 0
 dfa:	80 81       	ld	r24, Z
 dfc:	88 60       	ori	r24, 0x08	; 8
 dfe:	80 83       	st	Z, r24
	
	// 비반전 모드
	// 사용자가 설정한 PWM 값에 일치 시 OC3C의 출력핀이 LOW로 바뀌고 BOTTOM에 HIGH로 바뀐다.
	// P350 표 15-7
	TCCR3A |= 1 << COM3C1; 
 e00:	8c 91       	ld	r24, X
 e02:	88 60       	ori	r24, 0x08	; 8
 e04:	8c 93       	st	X, r24
	// 분주비 : 64 16,000,000(16MHz) / 64 --> 250,000Hz(250KHz)
	// T = 1/F = 1/250000Hz ==> 0.000004sec(4us)
	// 250,000Hz에서 256개의 펄스를 count하면 소요시간 1.024ms
	//				 127개
	TCCR3B |= 1 << CS31 | 1 << CS30;	//	64분주
 e06:	80 81       	ld	r24, Z
 e08:	83 60       	ori	r24, 0x03	; 3
 e0a:	80 83       	st	Z, r24
	OCR3C = 0;		// OCR(Output Compar Register) PWM값
 e0c:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
 e10:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
 e14:	08 95       	ret

00000e16 <init_L98N>:
//	  0			1	: 역회전
//	  1			0	: 정회전
//	  1			1	: STOP
void init_L98N(void)
{
	DDRF |= 1 << 6 | 1 << 7;		// 출력모드
 e16:	e1 e6       	ldi	r30, 0x61	; 97
 e18:	f0 e0       	ldi	r31, 0x00	; 0
 e1a:	80 81       	ld	r24, Z
 e1c:	80 6c       	ori	r24, 0xC0	; 192
 e1e:	80 83       	st	Z, r24
	PORTF &= ~(1 << 6 | 1 << 7);	
 e20:	e2 e6       	ldi	r30, 0x62	; 98
 e22:	f0 e0       	ldi	r31, 0x00	; 0
 e24:	80 81       	ld	r24, Z
 e26:	8f 73       	andi	r24, 0x3F	; 63
 e28:	80 83       	st	Z, r24
	PORTF |= 1 << 6;	// 정회전
 e2a:	80 81       	ld	r24, Z
 e2c:	80 64       	ori	r24, 0x40	; 64
 e2e:	80 83       	st	Z, r24
 e30:	08 95       	ret

00000e32 <__divmodhi4>:
 e32:	97 fb       	bst	r25, 7
 e34:	07 2e       	mov	r0, r23
 e36:	16 f4       	brtc	.+4      	; 0xe3c <__divmodhi4+0xa>
 e38:	00 94       	com	r0
 e3a:	06 d0       	rcall	.+12     	; 0xe48 <__divmodhi4_neg1>
 e3c:	77 fd       	sbrc	r23, 7
 e3e:	08 d0       	rcall	.+16     	; 0xe50 <__divmodhi4_neg2>
 e40:	14 d0       	rcall	.+40     	; 0xe6a <__udivmodhi4>
 e42:	07 fc       	sbrc	r0, 7
 e44:	05 d0       	rcall	.+10     	; 0xe50 <__divmodhi4_neg2>
 e46:	3e f4       	brtc	.+14     	; 0xe56 <__divmodhi4_exit>

00000e48 <__divmodhi4_neg1>:
 e48:	90 95       	com	r25
 e4a:	81 95       	neg	r24
 e4c:	9f 4f       	sbci	r25, 0xFF	; 255
 e4e:	08 95       	ret

00000e50 <__divmodhi4_neg2>:
 e50:	70 95       	com	r23
 e52:	61 95       	neg	r22
 e54:	7f 4f       	sbci	r23, 0xFF	; 255

00000e56 <__divmodhi4_exit>:
 e56:	08 95       	ret

00000e58 <__tablejump2__>:
 e58:	ee 0f       	add	r30, r30
 e5a:	ff 1f       	adc	r31, r31
 e5c:	00 24       	eor	r0, r0
 e5e:	00 1c       	adc	r0, r0
 e60:	0b be       	out	0x3b, r0	; 59
 e62:	07 90       	elpm	r0, Z+
 e64:	f6 91       	elpm	r31, Z
 e66:	e0 2d       	mov	r30, r0
 e68:	09 94       	ijmp

00000e6a <__udivmodhi4>:
 e6a:	aa 1b       	sub	r26, r26
 e6c:	bb 1b       	sub	r27, r27
 e6e:	51 e1       	ldi	r21, 0x11	; 17
 e70:	07 c0       	rjmp	.+14     	; 0xe80 <__udivmodhi4_ep>

00000e72 <__udivmodhi4_loop>:
 e72:	aa 1f       	adc	r26, r26
 e74:	bb 1f       	adc	r27, r27
 e76:	a6 17       	cp	r26, r22
 e78:	b7 07       	cpc	r27, r23
 e7a:	10 f0       	brcs	.+4      	; 0xe80 <__udivmodhi4_ep>
 e7c:	a6 1b       	sub	r26, r22
 e7e:	b7 0b       	sbc	r27, r23

00000e80 <__udivmodhi4_ep>:
 e80:	88 1f       	adc	r24, r24
 e82:	99 1f       	adc	r25, r25
 e84:	5a 95       	dec	r21
 e86:	a9 f7       	brne	.-22     	; 0xe72 <__udivmodhi4_loop>
 e88:	80 95       	com	r24
 e8a:	90 95       	com	r25
 e8c:	bc 01       	movw	r22, r24
 e8e:	cd 01       	movw	r24, r26
 e90:	08 95       	ret

00000e92 <_exit>:
 e92:	f8 94       	cli

00000e94 <__stop_program>:
 e94:	ff cf       	rjmp	.-2      	; 0xe94 <__stop_program>
